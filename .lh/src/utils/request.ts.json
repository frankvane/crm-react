{
    "sourceFile": "src/utils/request.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746087166812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746087417393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { MutationCache, QueryCache, QueryClient } from \"@tanstack/react-query\";\r\n-import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n+import axios, { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\r\n \r\n-import type { AxiosRequestConfig } from \"axios\";\r\n+import type { AxiosError } from \"axios\";\r\n import createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\n import { message } from \"antd\";\r\n import { useAuthStore } from \"@/store/modules/auth\";\r\n \r\n@@ -27,15 +27,13 @@\n });\r\n \r\n // 请求拦截器\r\n request.interceptors.request.use(\r\n-  (config: AxiosRequestConfig) => {\r\n+  (config: InternalAxiosRequestConfig) => {\r\n     const token = useAuthStore.getState().token;\r\n     if (token) {\r\n-      config.headers = {\r\n-        ...config.headers,\r\n-        Authorization: `Bearer ${token}`,\r\n-      };\r\n+      config.headers = config.headers || {};\r\n+      config.headers.Authorization = `Bearer ${token}`;\r\n     }\r\n     return config;\r\n   },\r\n   (error) => {\r\n@@ -55,9 +53,9 @@\n     }\r\n \r\n     return data;\r\n   },\r\n-  (error) => {\r\n+  (error: AxiosError) => {\r\n     if (error.response) {\r\n       const { status } = error.response;\r\n       switch (status) {\r\n         case 401:\r\n@@ -82,20 +80,33 @@\n     return Promise.reject(error);\r\n   }\r\n );\r\n \r\n+interface IRefreshTokenResponse {\r\n+  code: number;\r\n+  data: {\r\n+    token: string;\r\n+  };\r\n+  message: string;\r\n+}\r\n+\r\n+interface IFailedRequest {\r\n+  response: {\r\n+    config: {\r\n+      headers: Record<string, string>;\r\n+    };\r\n+  };\r\n+}\r\n+\r\n // Token 刷新逻辑\r\n-const refreshAuthLogic = async (failedRequest: any) => {\r\n+const refreshAuthLogic = async (failedRequest: IFailedRequest) => {\r\n   try {\r\n     const refreshToken = useAuthStore.getState().refreshToken;\r\n     if (!refreshToken) {\r\n       throw new Error(\"No refresh token available\");\r\n     }\r\n \r\n-    const response = await request.post<{\r\n-      code: number;\r\n-      data: { token: string };\r\n-    }>(\"/auth/refresh-token\", {\r\n+    const response = await request.post<IRefreshTokenResponse>(\"/auth/refresh-token\", {\r\n       refreshToken,\r\n     });\r\n \r\n     const { token } = response.data.data;\r\n"
                },
                {
                    "date": 1746089923927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,15 @@\n   (response: AxiosResponse) => {\r\n     const { data } = response;\r\n \r\n     // 这里可以根据后端的响应结构进行调整\r\n-    if (data.code !== 0) {\r\n+    if (data.code === 200) {\r\n+      return data;\r\n+    } else {\r\n+      const error = new Error(data.message || \"请求失败\");\r\n       message.error(data.message || \"请求失败\");\r\n-      return Promise.reject(new Error(data.message || \"请求失败\"));\r\n+      return Promise.reject(error);\r\n     }\r\n-\r\n-    return data;\r\n   },\r\n   (error: AxiosError) => {\r\n     if (error.response) {\r\n       const { status } = error.response;\r\n"
                }
            ],
            "date": 1746087166812,
            "name": "Commit-0",
            "content": "import { MutationCache, QueryCache, QueryClient } from \"@tanstack/react-query\";\r\nimport axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n\r\nimport type { AxiosRequestConfig } from \"axios\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\nimport { message } from \"antd\";\r\nimport { useAuthStore } from \"@/store/modules/auth\";\r\n\r\n// 配置全局消息提示\r\nmessage.config({\r\n  maxCount: 1,\r\n  duration: 3,\r\n  top: 24,\r\n});\r\n\r\n// 简洁的消息函数\r\nexport const showErrorMessage = (content: string) => message.error(content);\r\nexport const showSuccessMessage = (content: string) => message.success(content);\r\n\r\n// 创建axios实例\r\nconst request: AxiosInstance = axios.create({\r\n  baseURL: import.meta.env.VITE_API_BASE_URL || \"/api\",\r\n  timeout: 15000,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n  (config: AxiosRequestConfig) => {\r\n    const token = useAuthStore.getState().token;\r\n    if (token) {\r\n      config.headers = {\r\n        ...config.headers,\r\n        Authorization: `Bearer ${token}`,\r\n      };\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\nrequest.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    const { data } = response;\r\n\r\n    // 这里可以根据后端的响应结构进行调整\r\n    if (data.code !== 0) {\r\n      message.error(data.message || \"请求失败\");\r\n      return Promise.reject(new Error(data.message || \"请求失败\"));\r\n    }\r\n\r\n    return data;\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      const { status } = error.response;\r\n      switch (status) {\r\n        case 401:\r\n          // 未授权，清除token并跳转到登录页\r\n          useAuthStore.getState().logout();\r\n          break;\r\n        case 403:\r\n          message.error(\"没有权限访问\");\r\n          break;\r\n        case 404:\r\n          message.error(\"请求的资源不存在\");\r\n          break;\r\n        case 500:\r\n          message.error(\"服务器错误\");\r\n          break;\r\n        default:\r\n          message.error(\"网络错误\");\r\n      }\r\n    } else {\r\n      message.error(\"网络错误\");\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Token 刷新逻辑\r\nconst refreshAuthLogic = async (failedRequest: any) => {\r\n  try {\r\n    const refreshToken = useAuthStore.getState().refreshToken;\r\n    if (!refreshToken) {\r\n      throw new Error(\"No refresh token available\");\r\n    }\r\n\r\n    const response = await request.post<{ code: number; data: { token: string } }>(\"/auth/refresh-token\", {\r\n      refreshToken,\r\n    });\r\n\r\n    const { token } = response.data.data;\r\n    useAuthStore.getState().setTokens(token, refreshToken);\r\n\r\n    // 更新失败请求的 Authorization 头\r\n    failedRequest.response.config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n\r\n    return Promise.resolve();\r\n  } catch (error) {\r\n    useAuthStore.getState().logout();\r\n    return Promise.reject(error);\r\n  }\r\n};\r\n\r\n// 注册刷新拦截器\r\ncreateAuthRefreshInterceptor(request, refreshAuthLogic, {\r\n  statusCodes: [401],\r\n});\r\n\r\n// 创建查询客户端\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n      retry: 1,\r\n      staleTime: 5 * 60 * 1000, // 5 分钟\r\n    },\r\n  },\r\n  queryCache: new QueryCache({\r\n    onError: (error) => {\r\n      if (error instanceof Error) {\r\n        showErrorMessage(error.message);\r\n      }\r\n    },\r\n  }),\r\n  mutationCache: new MutationCache({\r\n    onError: (error) => {\r\n      if (error instanceof Error) {\r\n        showErrorMessage(error.message);\r\n      }\r\n    },\r\n  }),\r\n});\r\n\r\nexport default request; "
        }
    ]
}