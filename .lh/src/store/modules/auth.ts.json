{
    "sourceFile": "src/store/modules/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1746086874861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746091234605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,16 @@\n import { create } from \"zustand\";\r\n import { persist } from \"zustand/middleware\";\r\n \r\n interface IAuthState {\r\n-  token: string | null;\r\n+  accessToken: string | null;\r\n   refreshToken: string | null;\r\n   user: IUserInfo | null;\r\n   isAuthenticated: boolean;\r\n }\r\n \r\n interface IAuthActions {\r\n-  setTokens: (token: string, refreshToken: string) => void;\r\n+  setTokens: (accessToken: string, refreshToken: string) => void;\r\n   setUser: (user: IUserInfo) => void;\r\n   login: (username: string, password: string) => Promise<void>;\r\n   logout: () => Promise<void>;\r\n   refreshTokens: () => Promise<void>;\r\n@@ -21,39 +21,45 @@\n export const useAuthStore = create<IAuthState & IAuthActions>()(\r\n   persist(\r\n     (set, get) => ({\r\n       // State\r\n-      token: null,\r\n+      accessToken: null,\r\n       refreshToken: null,\r\n       user: null,\r\n       isAuthenticated: false,\r\n \r\n       // Actions\r\n-      setTokens: (token: string, refreshToken: string) => {\r\n-        set({ token, refreshToken, isAuthenticated: true });\r\n+      setTokens: (accessToken: string, refreshToken: string) => {\r\n+        set({ accessToken, refreshToken, isAuthenticated: true });\r\n+        // 同时更新 localStorage\r\n+        localStorage.setItem(\"accessToken\", accessToken);\r\n+        localStorage.setItem(\"refreshToken\", refreshToken);\r\n       },\r\n \r\n       setUser: (user: IUserInfo) => {\r\n         set({ user });\r\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { token, refreshToken, user } = response.data;\r\n-        get().setTokens(token, refreshToken);\r\n+        const { accessToken, refreshToken, user } = response;\r\n+        get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n       logout: async () => {\r\n         try {\r\n           await authApi.logout();\r\n         } finally {\r\n           set({\r\n-            token: null,\r\n+            accessToken: null,\r\n             refreshToken: null,\r\n             user: null,\r\n             isAuthenticated: false,\r\n           });\r\n+          // 清除 localStorage\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n@@ -62,16 +68,16 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { token } = response.data;\r\n-        set({ token });\r\n+        const { accessToken, refreshToken } = response;\r\n+        get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n       name: \"auth-storage\",\r\n       partialize: (state) => ({\r\n-        token: state.token,\r\n+        accessToken: state.accessToken,\r\n         refreshToken: state.refreshToken,\r\n         user: state.user,\r\n       }),\r\n     }\r\n"
                },
                {
                    "date": 1746091247613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response;\r\n+        const { accessToken, refreshToken, user } = response.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response;\r\n+        const { accessToken, refreshToken } = response.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091261595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response.data;\r\n+        const { accessToken, refreshToken, user } = response.data.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response.data;\r\n+        const { accessToken, refreshToken } = response.data.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091376533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response.data.data;\r\n+        const { accessToken, refreshToken, user } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response.data.data;\r\n+        const { accessToken, refreshToken } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091403309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,11 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response;\r\n+        const {\r\n+          data: { accessToken, refreshToken, user },\r\n+        } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +70,11 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response;\r\n+        const {\r\n+          data: { accessToken, refreshToken },\r\n+        } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091702308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,15 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const {\r\n-          data: { accessToken, refreshToken, user },\r\n-        } = response;\r\n-        get().setTokens(accessToken, refreshToken);\r\n-        get().setUser(user);\r\n+        if (response.data.code === 200) {\r\n+          const { accessToken, refreshToken, user } = response.data.data;\r\n+          get().setTokens(accessToken, refreshToken);\r\n+          get().setUser(user);\r\n+        } else {\r\n+          throw new Error(response.data.message || \"登录失败\");\r\n+        }\r\n       },\r\n \r\n       logout: async () => {\r\n         try {\r\n@@ -70,12 +72,14 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const {\r\n-          data: { accessToken, refreshToken },\r\n-        } = response;\r\n-        get().setTokens(accessToken, refreshToken);\r\n+        if (response.data.code === 200) {\r\n+          const { accessToken, refreshToken } = response.data.data;\r\n+          get().setTokens(accessToken, refreshToken);\r\n+        } else {\r\n+          throw new Error(response.data.message || \"刷新 token 失败\");\r\n+        }\r\n       },\r\n     }),\r\n     {\r\n       name: \"auth-storage\",\r\n"
                },
                {
                    "date": 1746096813122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,15 +39,20 @@\n         set({ user });\r\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n-        const response = await authApi.login({ username, password });\r\n-        if (response.data.code === 200) {\r\n-          const { accessToken, refreshToken, user } = response.data.data;\r\n+        try {\r\n+          const { accessToken, refreshToken, user } = await authApi.login({\r\n+            username,\r\n+            password,\r\n+          });\r\n           get().setTokens(accessToken, refreshToken);\r\n           get().setUser(user);\r\n-        } else {\r\n-          throw new Error(response.data.message || \"登录失败\");\r\n+        } catch (error) {\r\n+          // 清除可能存在的旧 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n         }\r\n       },\r\n \r\n       logout: async () => {\r\n@@ -71,14 +76,18 @@\n         if (!currentRefreshToken) {\r\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n-        const response = await authApi.refreshToken(currentRefreshToken);\r\n-        if (response.data.code === 200) {\r\n-          const { accessToken, refreshToken } = response.data.data;\r\n+        try {\r\n+          const { accessToken, refreshToken } = await authApi.refreshToken(\r\n+            currentRefreshToken\r\n+          );\r\n           get().setTokens(accessToken, refreshToken);\r\n-        } else {\r\n-          throw new Error(response.data.message || \"刷新 token 失败\");\r\n+        } catch (error) {\r\n+          // 刷新失败时清除 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n         }\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746199329246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,17 +6,22 @@\n interface IAuthState {\r\n   accessToken: string | null;\r\n   refreshToken: string | null;\r\n   user: IUserInfo | null;\r\n+  roles: any[];\r\n+  resources: any[];\r\n   isAuthenticated: boolean;\r\n }\r\n \r\n interface IAuthActions {\r\n   setTokens: (accessToken: string, refreshToken: string) => void;\r\n   setUser: (user: IUserInfo) => void;\r\n+  setRoles: (roles: any[]) => void;\r\n+  setResources: (resources: any[]) => void;\r\n   login: (username: string, password: string) => Promise<void>;\r\n   logout: () => Promise<void>;\r\n   refreshTokens: () => Promise<void>;\r\n+  fetchCurrentUser: () => Promise<void>;\r\n }\r\n \r\n export const useAuthStore = create<IAuthState & IAuthActions>()(\r\n   persist(\r\n@@ -24,8 +29,10 @@\n       // State\r\n       accessToken: null,\r\n       refreshToken: null,\r\n       user: null,\r\n+      roles: [],\r\n+      resources: [],\r\n       isAuthenticated: false,\r\n \r\n       // Actions\r\n       setTokens: (accessToken: string, refreshToken: string) => {\r\n@@ -38,16 +45,26 @@\n       setUser: (user: IUserInfo) => {\r\n         set({ user });\r\n       },\r\n \r\n+      setRoles: (roles: any[]) => {\r\n+        set({ roles });\r\n+      },\r\n+\r\n+      setResources: (resources: any[]) => {\r\n+        set({ resources });\r\n+      },\r\n+\r\n       login: async (username: string, password: string) => {\r\n         try {\r\n           const { accessToken, refreshToken, user } = await authApi.login({\r\n             username,\r\n             password,\r\n           });\r\n           get().setTokens(accessToken, refreshToken);\r\n           get().setUser(user);\r\n+          // 登录后拉取用户信息\r\n+          await get().fetchCurrentUser();\r\n         } catch (error) {\r\n           // 清除可能存在的旧 token\r\n           localStorage.removeItem(\"accessToken\");\r\n           localStorage.removeItem(\"refreshToken\");\r\n@@ -62,8 +79,10 @@\n           set({\r\n             accessToken: null,\r\n             refreshToken: null,\r\n             user: null,\r\n+            roles: [],\r\n+            resources: [],\r\n             isAuthenticated: false,\r\n           });\r\n           // 清除 localStorage\r\n           localStorage.removeItem(\"accessToken\");\r\n@@ -88,15 +107,26 @@\n           localStorage.removeItem(\"refreshToken\");\r\n           throw error;\r\n         }\r\n       },\r\n+\r\n+      fetchCurrentUser: async () => {\r\n+        try {\r\n+          const { user, roles, resources } = await authApi.getCurrentUser();\r\n+          set({ user, roles, resources, isAuthenticated: true });\r\n+        } catch (error) {\r\n+          set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n+        }\r\n+      },\r\n     }),\r\n     {\r\n       name: \"auth-storage\",\r\n       partialize: (state) => ({\r\n         accessToken: state.accessToken,\r\n         refreshToken: state.refreshToken,\r\n         user: state.user,\r\n+        roles: state.roles,\r\n+        resources: state.resources,\r\n       }),\r\n     }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1746199342592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,11 +110,12 @@\n       },\r\n \r\n       fetchCurrentUser: async () => {\r\n         try {\r\n-          const { user, roles, resources } = await authApi.getCurrentUser();\r\n+          const response = await authApi.getCurrentUser();\r\n+          const { user, roles, resources } = response.data;\r\n           set({ user, roles, resources, isAuthenticated: true });\r\n-        } catch (error) {\r\n+        } catch {\r\n           set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n         }\r\n       },\r\n     }),\r\n"
                },
                {
                    "date": 1746199708968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n       isAuthenticated: false,\r\n \r\n       // Actions\r\n       setTokens: (accessToken: string, refreshToken: string) => {\r\n+        console.log(accessToken, refreshToken);\r\n         set({ accessToken, refreshToken, isAuthenticated: true });\r\n         // 同时更新 localStorage\r\n         localStorage.setItem(\"accessToken\", accessToken);\r\n         localStorage.setItem(\"refreshToken\", refreshToken);\r\n"
                },
                {
                    "date": 1746199729617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n       isAuthenticated: false,\r\n \r\n       // Actions\r\n       setTokens: (accessToken: string, refreshToken: string) => {\r\n-        console.log(accessToken, refreshToken);\r\n         set({ accessToken, refreshToken, isAuthenticated: true });\r\n         // 同时更新 localStorage\r\n         localStorage.setItem(\"accessToken\", accessToken);\r\n         localStorage.setItem(\"refreshToken\", refreshToken);\r\n"
                },
                {
                    "date": 1746199803951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,9 @@\n         try {\r\n           const response = await authApi.getCurrentUser();\r\n           const { user, roles, resources } = response.data;\r\n           set({ user, roles, resources, isAuthenticated: true });\r\n+          console.log({ user, roles, resources, isAuthenticated: true });\r\n         } catch {\r\n           set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n         }\r\n       },\r\n"
                },
                {
                    "date": 1746199845597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,13 +109,13 @@\n         }\r\n       },\r\n \r\n       fetchCurrentUser: async () => {\r\n+        console.log(\">>>>>\");\r\n         try {\r\n           const response = await authApi.getCurrentUser();\r\n           const { user, roles, resources } = response.data;\r\n           set({ user, roles, resources, isAuthenticated: true });\r\n-          console.log({ user, roles, resources, isAuthenticated: true });\r\n         } catch {\r\n           set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n         }\r\n       },\r\n"
                },
                {
                    "date": 1746199864222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,11 +109,12 @@\n         }\r\n       },\r\n \r\n       fetchCurrentUser: async () => {\r\n-        console.log(\">>>>>\");\r\n         try {\r\n           const response = await authApi.getCurrentUser();\r\n+          console.log(\">>>>>\", response);\r\n+\r\n           const { user, roles, resources } = response.data;\r\n           set({ user, roles, resources, isAuthenticated: true });\r\n         } catch {\r\n           set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n"
                },
                {
                    "date": 1746199882135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,11 +111,9 @@\n \r\n       fetchCurrentUser: async () => {\r\n         try {\r\n           const response = await authApi.getCurrentUser();\r\n-          console.log(\">>>>>\", response);\r\n-\r\n-          const { user, roles, resources } = response.data;\r\n+          const { user, roles, resources } = response;\r\n           set({ user, roles, resources, isAuthenticated: true });\r\n         } catch {\r\n           set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n         }\r\n"
                },
                {
                    "date": 1746200100138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,10 @@\n       },\r\n \r\n       logout: async () => {\r\n         try {\r\n-          await authApi.logout();\r\n+          // 传递refreshToken\r\n+          await authApi.logout(get().refreshToken);\r\n         } finally {\r\n           set({\r\n             accessToken: null,\r\n             refreshToken: null,\r\n"
                },
                {
                    "date": 1746200163180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n \r\n       logout: async () => {\r\n         try {\r\n           // 传递refreshToken\r\n-          await authApi.logout(get().refreshToken);\r\n+          await authApi.logout(get()?.refreshToken || \"\");\r\n         } finally {\r\n           set({\r\n             accessToken: null,\r\n             refreshToken: null,\r\n"
                },
                {
                    "date": 1746200188265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n \r\n       logout: async () => {\r\n         try {\r\n           // 传递refreshToken\r\n-          await authApi.logout(get()?.refreshToken || \"\");\r\n+          await authApi.logout(get().refreshToken || \"\");\r\n         } finally {\r\n           set({\r\n             accessToken: null,\r\n             refreshToken: null,\r\n@@ -87,8 +87,10 @@\n           });\r\n           // 清除 localStorage\r\n           localStorage.removeItem(\"accessToken\");\r\n           localStorage.removeItem(\"refreshToken\");\r\n+          // redirect\r\n+          navigate(\"/login\");\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n"
                },
                {
                    "date": 1746200227559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import type { IUserInfo } from \"@/types/api/common\";\r\n import { authApi } from \"@/api/modules/auth\";\r\n import { create } from \"zustand\";\r\n import { persist } from \"zustand/middleware\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n \r\n interface IAuthState {\r\n   accessToken: string | null;\r\n   refreshToken: string | null;\r\n@@ -88,9 +89,8 @@\n           // 清除 localStorage\r\n           localStorage.removeItem(\"accessToken\");\r\n           localStorage.removeItem(\"refreshToken\");\r\n           // redirect\r\n-          navigate(\"/login\");\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n"
                },
                {
                    "date": 1746200255127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,10 @@\n         }\r\n       },\r\n \r\n       logout: async () => {\r\n+        const navigate = useNavigate();\r\n+\r\n         try {\r\n           // 传递refreshToken\r\n           await authApi.logout(get().refreshToken || \"\");\r\n         } finally {\r\n"
                },
                {
                    "date": 1746200272240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import type { IUserInfo } from \"@/types/api/common\";\r\n import { authApi } from \"@/api/modules/auth\";\r\n import { create } from \"zustand\";\r\n import { persist } from \"zustand/middleware\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n \r\n interface IAuthState {\r\n   accessToken: string | null;\r\n   refreshToken: string | null;\r\n@@ -73,10 +72,8 @@\n         }\r\n       },\r\n \r\n       logout: async () => {\r\n-        const navigate = useNavigate();\r\n-\r\n         try {\r\n           // 传递refreshToken\r\n           await authApi.logout(get().refreshToken || \"\");\r\n         } finally {\r\n"
                },
                {
                    "date": 1746200346317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,10 @@\n           });\r\n           // 清除 localStorage\r\n           localStorage.removeItem(\"accessToken\");\r\n           localStorage.removeItem(\"refreshToken\");\r\n-          // redirect\r\n+          // 自动重定向到登录页\r\n+          window.location.href = \"/user/login\";\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n"
                },
                {
                    "date": 1746200365439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,9 @@\n           });\r\n           // 清除 localStorage\r\n           localStorage.removeItem(\"accessToken\");\r\n           localStorage.removeItem(\"refreshToken\");\r\n-          // 自动重定向到登录页\r\n-          window.location.href = \"/user/login\";\r\n+          // redirect\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n"
                },
                {
                    "date": 1746246300814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import type { IUserInfo } from \"@/types/api/common\";\r\n+import { authApi } from \"@/api/modules/auth\";\r\n+import { create } from \"zustand\";\r\n+import { persist } from \"zustand/middleware\";\r\n+import { useTabStore } from \"@/store/modules/tab\";\r\n+\r\n+interface IAuthState {\r\n+  accessToken: string | null;\r\n+  refreshToken: string | null;\r\n+  user: IUserInfo | null;\r\n+  roles: any[];\r\n+  resources: any[];\r\n+  isAuthenticated: boolean;\r\n+}\r\n+\r\n+interface IAuthActions {\r\n+  setTokens: (accessToken: string, refreshToken: string) => void;\r\n+  setUser: (user: IUserInfo) => void;\r\n+  setRoles: (roles: any[]) => void;\r\n+  setResources: (resources: any[]) => void;\r\n+  login: (username: string, password: string) => Promise<void>;\r\n+  logout: () => Promise<void>;\r\n+  refreshTokens: () => Promise<void>;\r\n+  fetchCurrentUser: () => Promise<void>;\r\n+}\r\n+\r\n+export const useAuthStore = create<IAuthState & IAuthActions>()(\r\n+  persist(\r\n+    (set, get) => ({\r\n+      // State\r\n+      accessToken: null,\r\n+      refreshToken: null,\r\n+      user: null,\r\n+      roles: [],\r\n+      resources: [],\r\n+      isAuthenticated: false,\r\n+\r\n+      // Actions\r\n+      setTokens: (accessToken: string, refreshToken: string) => {\r\n+        set({ accessToken, refreshToken, isAuthenticated: true });\r\n+        // 同时更新 localStorage\r\n+        localStorage.setItem(\"accessToken\", accessToken);\r\n+        localStorage.setItem(\"refreshToken\", refreshToken);\r\n+      },\r\n+\r\n+      setUser: (user: IUserInfo) => {\r\n+        set({ user });\r\n+      },\r\n+\r\n+      setRoles: (roles: any[]) => {\r\n+        set({ roles });\r\n+      },\r\n+\r\n+      setResources: (resources: any[]) => {\r\n+        set({ resources });\r\n+      },\r\n+\r\n+      login: async (username: string, password: string) => {\r\n+        try {\r\n+          // 登录前清除所有标签页\r\n+          useTabStore.getState().removeAllTabs();\r\n+\r\n+          const { accessToken, refreshToken, user } = await authApi.login({\r\n+            username,\r\n+            password,\r\n+          });\r\n+          // 设置 isAuthenticated 为 true\r\n+          set({ isAuthenticated: true });\r\n+          get().setTokens(accessToken, refreshToken);\r\n+          get().setUser(user);\r\n+          // 登录后拉取用户信息\r\n+          await get().fetchCurrentUser();\r\n+        } catch (error) {\r\n+          // 清除可能存在的旧 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n+        }\r\n+      },\r\n+\r\n+      logout: async () => {\r\n+        try {\r\n+          // 传递refreshToken\r\n+          await authApi.logout(get().refreshToken || \"\");\r\n+        } finally {\r\n+          set({\r\n+            accessToken: null,\r\n+            refreshToken: null,\r\n+            user: null,\r\n+            roles: [],\r\n+            resources: [],\r\n+            isAuthenticated: false,\r\n+          });\r\n+          // 清除 localStorage\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          // redirect\r\n+        }\r\n+      },\r\n+\r\n+      refreshTokens: async () => {\r\n+        const currentRefreshToken = get().refreshToken;\r\n+        if (!currentRefreshToken) {\r\n+          throw new Error(\"No refresh token available\");\r\n+        }\r\n+\r\n+        try {\r\n+          const { accessToken, refreshToken } = await authApi.refreshToken(\r\n+            currentRefreshToken\r\n+          );\r\n+          get().setTokens(accessToken, refreshToken);\r\n+        } catch (error) {\r\n+          // 刷新失败时清除 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n+        }\r\n+      },\r\n+\r\n+      fetchCurrentUser: async () => {\r\n+        try {\r\n+          const response = await authApi.getCurrentUser();\r\n+          const { user, roles, resources } = response;\r\n+          set({ user, roles, resources, isAuthenticated: true });\r\n+        } catch {\r\n+          set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n+        }\r\n+      },\r\n+    }),\r\n+    {\r\n+      name: \"auth-storage\",\r\n+      partialize: (state) => ({\r\n+        isAuthenticated: state.isAuthenticated,\r\n+        accessToken: state.accessToken,\r\n+        refreshToken: state.refreshToken,\r\n+        user: state.user,\r\n+        roles: state.roles,\r\n+        resources: state.resources,\r\n+      }),\r\n+    }\r\n+  )\r\n+);\r\n"
                },
                {
                    "date": 1746246354125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n             password,\r\n           });\r\n           // 设置 isAuthenticated 为 true\r\n           set({ isAuthenticated: true });\r\n+          console.log(isAuthenticated, \"isAuthenticated\");\r\n           get().setTokens(accessToken, refreshToken);\r\n           get().setUser(user);\r\n           // 登录后拉取用户信息\r\n           await get().fetchCurrentUser();\r\n@@ -139,139 +140,4 @@\n       }),\r\n     }\r\n   )\r\n );\r\n-import type { IUserInfo } from \"@/types/api/common\";\r\n-import { authApi } from \"@/api/modules/auth\";\r\n-import { create } from \"zustand\";\r\n-import { persist } from \"zustand/middleware\";\r\n-\r\n-interface IAuthState {\r\n-  accessToken: string | null;\r\n-  refreshToken: string | null;\r\n-  user: IUserInfo | null;\r\n-  roles: any[];\r\n-  resources: any[];\r\n-  isAuthenticated: boolean;\r\n-}\r\n-\r\n-interface IAuthActions {\r\n-  setTokens: (accessToken: string, refreshToken: string) => void;\r\n-  setUser: (user: IUserInfo) => void;\r\n-  setRoles: (roles: any[]) => void;\r\n-  setResources: (resources: any[]) => void;\r\n-  login: (username: string, password: string) => Promise<void>;\r\n-  logout: () => Promise<void>;\r\n-  refreshTokens: () => Promise<void>;\r\n-  fetchCurrentUser: () => Promise<void>;\r\n-}\r\n-\r\n-export const useAuthStore = create<IAuthState & IAuthActions>()(\r\n-  persist(\r\n-    (set, get) => ({\r\n-      // State\r\n-      accessToken: null,\r\n-      refreshToken: null,\r\n-      user: null,\r\n-      roles: [],\r\n-      resources: [],\r\n-      isAuthenticated: false,\r\n-\r\n-      // Actions\r\n-      setTokens: (accessToken: string, refreshToken: string) => {\r\n-        set({ accessToken, refreshToken, isAuthenticated: true });\r\n-        // 同时更新 localStorage\r\n-        localStorage.setItem(\"accessToken\", accessToken);\r\n-        localStorage.setItem(\"refreshToken\", refreshToken);\r\n-      },\r\n-\r\n-      setUser: (user: IUserInfo) => {\r\n-        set({ user });\r\n-      },\r\n-\r\n-      setRoles: (roles: any[]) => {\r\n-        set({ roles });\r\n-      },\r\n-\r\n-      setResources: (resources: any[]) => {\r\n-        set({ resources });\r\n-      },\r\n-\r\n-      login: async (username: string, password: string) => {\r\n-        try {\r\n-          const { accessToken, refreshToken, user } = await authApi.login({\r\n-            username,\r\n-            password,\r\n-          });\r\n-          get().setTokens(accessToken, refreshToken);\r\n-          get().setUser(user);\r\n-          // 登录后拉取用户信息\r\n-          await get().fetchCurrentUser();\r\n-        } catch (error) {\r\n-          // 清除可能存在的旧 token\r\n-          localStorage.removeItem(\"accessToken\");\r\n-          localStorage.removeItem(\"refreshToken\");\r\n-          throw error;\r\n-        }\r\n-      },\r\n-\r\n-      logout: async () => {\r\n-        try {\r\n-          // 传递refreshToken\r\n-          await authApi.logout(get().refreshToken || \"\");\r\n-        } finally {\r\n-          set({\r\n-            accessToken: null,\r\n-            refreshToken: null,\r\n-            user: null,\r\n-            roles: [],\r\n-            resources: [],\r\n-            isAuthenticated: false,\r\n-          });\r\n-          // 清除 localStorage\r\n-          localStorage.removeItem(\"accessToken\");\r\n-          localStorage.removeItem(\"refreshToken\");\r\n-          // redirect\r\n-        }\r\n-      },\r\n-\r\n-      refreshTokens: async () => {\r\n-        const currentRefreshToken = get().refreshToken;\r\n-        if (!currentRefreshToken) {\r\n-          throw new Error(\"No refresh token available\");\r\n-        }\r\n-\r\n-        try {\r\n-          const { accessToken, refreshToken } = await authApi.refreshToken(\r\n-            currentRefreshToken\r\n-          );\r\n-          get().setTokens(accessToken, refreshToken);\r\n-        } catch (error) {\r\n-          // 刷新失败时清除 token\r\n-          localStorage.removeItem(\"accessToken\");\r\n-          localStorage.removeItem(\"refreshToken\");\r\n-          throw error;\r\n-        }\r\n-      },\r\n-\r\n-      fetchCurrentUser: async () => {\r\n-        try {\r\n-          const response = await authApi.getCurrentUser();\r\n-          const { user, roles, resources } = response;\r\n-          set({ user, roles, resources, isAuthenticated: true });\r\n-        } catch {\r\n-          set({ user: null, roles: [], resources: [], isAuthenticated: false });\r\n-        }\r\n-      },\r\n-    }),\r\n-    {\r\n-      name: \"auth-storage\",\r\n-      partialize: (state) => ({\r\n-        accessToken: state.accessToken,\r\n-        refreshToken: state.refreshToken,\r\n-        user: state.user,\r\n-        roles: state.roles,\r\n-        resources: state.resources,\r\n-      }),\r\n-    }\r\n-  )\r\n-);\r\n"
                },
                {
                    "date": 1746246364727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,11 +63,9 @@\n           const { accessToken, refreshToken, user } = await authApi.login({\r\n             username,\r\n             password,\r\n           });\r\n-          // 设置 isAuthenticated 为 true\r\n-          set({ isAuthenticated: true });\r\n-          console.log(isAuthenticated, \"isAuthenticated\");\r\n+\r\n           get().setTokens(accessToken, refreshToken);\r\n           get().setUser(user);\r\n           // 登录后拉取用户信息\r\n           await get().fetchCurrentUser();\r\n"
                },
                {
                    "date": 1746246476007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n   setTokens: (accessToken: string, refreshToken: string) => void;\r\n   setUser: (user: IUserInfo) => void;\r\n   setRoles: (roles: any[]) => void;\r\n   setResources: (resources: any[]) => void;\r\n+  setIsAuthenticated: (isAuthenticated: boolean) => void;\r\n   login: (username: string, password: string) => Promise<void>;\r\n   logout: () => Promise<void>;\r\n   refreshTokens: () => Promise<void>;\r\n   fetchCurrentUser: () => Promise<void>;\r\n@@ -54,8 +55,12 @@\n       setResources: (resources: any[]) => {\r\n         set({ resources });\r\n       },\r\n \r\n+      setIsAuthenticated: (isAuthenticated: boolean) => {\r\n+        set({ isAuthenticated });\r\n+      },\r\n+\r\n       login: async (username: string, password: string) => {\r\n         try {\r\n           // 登录前清除所有标签页\r\n           useTabStore.getState().removeAllTabs();\r\n@@ -64,10 +69,14 @@\n             username,\r\n             password,\r\n           });\r\n \r\n+          // 先设置 token\r\n           get().setTokens(accessToken, refreshToken);\r\n+          // 再设置用户信息\r\n           get().setUser(user);\r\n+          // 最后设置认证状态为 true\r\n+          get().setIsAuthenticated(true);\r\n           // 登录后拉取用户信息\r\n           await get().fetchCurrentUser();\r\n         } catch (error) {\r\n           // 清除可能存在的旧 token\r\n"
                }
            ],
            "date": 1746086874861,
            "name": "Commit-0",
            "content": "import type { IUserInfo } from \"@/types/api/common\";\r\nimport { authApi } from \"@/api/modules/auth\";\r\nimport { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\";\r\n\r\ninterface IAuthState {\r\n  token: string | null;\r\n  refreshToken: string | null;\r\n  user: IUserInfo | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\ninterface IAuthActions {\r\n  setTokens: (token: string, refreshToken: string) => void;\r\n  setUser: (user: IUserInfo) => void;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  refreshTokens: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<IAuthState & IAuthActions>()(\r\n  persist(\r\n    (set, get) => ({\r\n      // State\r\n      token: null,\r\n      refreshToken: null,\r\n      user: null,\r\n      isAuthenticated: false,\r\n\r\n      // Actions\r\n      setTokens: (token: string, refreshToken: string) => {\r\n        set({ token, refreshToken, isAuthenticated: true });\r\n      },\r\n\r\n      setUser: (user: IUserInfo) => {\r\n        set({ user });\r\n      },\r\n\r\n      login: async (username: string, password: string) => {\r\n        const response = await authApi.login({ username, password });\r\n        const { token, refreshToken, user } = response.data;\r\n        get().setTokens(token, refreshToken);\r\n        get().setUser(user);\r\n      },\r\n\r\n      logout: async () => {\r\n        try {\r\n          await authApi.logout();\r\n        } finally {\r\n          set({\r\n            token: null,\r\n            refreshToken: null,\r\n            user: null,\r\n            isAuthenticated: false,\r\n          });\r\n        }\r\n      },\r\n\r\n      refreshTokens: async () => {\r\n        const currentRefreshToken = get().refreshToken;\r\n        if (!currentRefreshToken) {\r\n          throw new Error(\"No refresh token available\");\r\n        }\r\n\r\n        const response = await authApi.refreshToken(currentRefreshToken);\r\n        const { token } = response.data;\r\n        set({ token });\r\n      },\r\n    }),\r\n    {\r\n      name: \"auth-storage\",\r\n      partialize: (state) => ({\r\n        token: state.token,\r\n        refreshToken: state.refreshToken,\r\n        user: state.user,\r\n      }),\r\n    }\r\n  )\r\n);\r\n"
        }
    ]
}