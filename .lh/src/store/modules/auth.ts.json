{
    "sourceFile": "src/store/modules/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746086874861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746091234605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,16 @@\n import { create } from \"zustand\";\r\n import { persist } from \"zustand/middleware\";\r\n \r\n interface IAuthState {\r\n-  token: string | null;\r\n+  accessToken: string | null;\r\n   refreshToken: string | null;\r\n   user: IUserInfo | null;\r\n   isAuthenticated: boolean;\r\n }\r\n \r\n interface IAuthActions {\r\n-  setTokens: (token: string, refreshToken: string) => void;\r\n+  setTokens: (accessToken: string, refreshToken: string) => void;\r\n   setUser: (user: IUserInfo) => void;\r\n   login: (username: string, password: string) => Promise<void>;\r\n   logout: () => Promise<void>;\r\n   refreshTokens: () => Promise<void>;\r\n@@ -21,39 +21,45 @@\n export const useAuthStore = create<IAuthState & IAuthActions>()(\r\n   persist(\r\n     (set, get) => ({\r\n       // State\r\n-      token: null,\r\n+      accessToken: null,\r\n       refreshToken: null,\r\n       user: null,\r\n       isAuthenticated: false,\r\n \r\n       // Actions\r\n-      setTokens: (token: string, refreshToken: string) => {\r\n-        set({ token, refreshToken, isAuthenticated: true });\r\n+      setTokens: (accessToken: string, refreshToken: string) => {\r\n+        set({ accessToken, refreshToken, isAuthenticated: true });\r\n+        // 同时更新 localStorage\r\n+        localStorage.setItem(\"accessToken\", accessToken);\r\n+        localStorage.setItem(\"refreshToken\", refreshToken);\r\n       },\r\n \r\n       setUser: (user: IUserInfo) => {\r\n         set({ user });\r\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { token, refreshToken, user } = response.data;\r\n-        get().setTokens(token, refreshToken);\r\n+        const { accessToken, refreshToken, user } = response;\r\n+        get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n       logout: async () => {\r\n         try {\r\n           await authApi.logout();\r\n         } finally {\r\n           set({\r\n-            token: null,\r\n+            accessToken: null,\r\n             refreshToken: null,\r\n             user: null,\r\n             isAuthenticated: false,\r\n           });\r\n+          // 清除 localStorage\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n         }\r\n       },\r\n \r\n       refreshTokens: async () => {\r\n@@ -62,16 +68,16 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { token } = response.data;\r\n-        set({ token });\r\n+        const { accessToken, refreshToken } = response;\r\n+        get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n       name: \"auth-storage\",\r\n       partialize: (state) => ({\r\n-        token: state.token,\r\n+        accessToken: state.accessToken,\r\n         refreshToken: state.refreshToken,\r\n         user: state.user,\r\n       }),\r\n     }\r\n"
                },
                {
                    "date": 1746091247613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response;\r\n+        const { accessToken, refreshToken, user } = response.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response;\r\n+        const { accessToken, refreshToken } = response.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091261595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response.data;\r\n+        const { accessToken, refreshToken, user } = response.data.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response.data;\r\n+        const { accessToken, refreshToken } = response.data.data;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091376533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response.data.data;\r\n+        const { accessToken, refreshToken, user } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +68,9 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response.data.data;\r\n+        const { accessToken, refreshToken } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091403309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,11 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const { accessToken, refreshToken, user } = response;\r\n+        const {\r\n+          data: { accessToken, refreshToken, user },\r\n+        } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n         get().setUser(user);\r\n       },\r\n \r\n@@ -68,9 +70,11 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const { accessToken, refreshToken } = response;\r\n+        const {\r\n+          data: { accessToken, refreshToken },\r\n+        } = response;\r\n         get().setTokens(accessToken, refreshToken);\r\n       },\r\n     }),\r\n     {\r\n"
                },
                {
                    "date": 1746091702308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,15 @@\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n         const response = await authApi.login({ username, password });\r\n-        const {\r\n-          data: { accessToken, refreshToken, user },\r\n-        } = response;\r\n-        get().setTokens(accessToken, refreshToken);\r\n-        get().setUser(user);\r\n+        if (response.data.code === 200) {\r\n+          const { accessToken, refreshToken, user } = response.data.data;\r\n+          get().setTokens(accessToken, refreshToken);\r\n+          get().setUser(user);\r\n+        } else {\r\n+          throw new Error(response.data.message || \"登录失败\");\r\n+        }\r\n       },\r\n \r\n       logout: async () => {\r\n         try {\r\n@@ -70,12 +72,14 @@\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n         const response = await authApi.refreshToken(currentRefreshToken);\r\n-        const {\r\n-          data: { accessToken, refreshToken },\r\n-        } = response;\r\n-        get().setTokens(accessToken, refreshToken);\r\n+        if (response.data.code === 200) {\r\n+          const { accessToken, refreshToken } = response.data.data;\r\n+          get().setTokens(accessToken, refreshToken);\r\n+        } else {\r\n+          throw new Error(response.data.message || \"刷新 token 失败\");\r\n+        }\r\n       },\r\n     }),\r\n     {\r\n       name: \"auth-storage\",\r\n"
                },
                {
                    "date": 1746096813122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,15 +39,20 @@\n         set({ user });\r\n       },\r\n \r\n       login: async (username: string, password: string) => {\r\n-        const response = await authApi.login({ username, password });\r\n-        if (response.data.code === 200) {\r\n-          const { accessToken, refreshToken, user } = response.data.data;\r\n+        try {\r\n+          const { accessToken, refreshToken, user } = await authApi.login({\r\n+            username,\r\n+            password,\r\n+          });\r\n           get().setTokens(accessToken, refreshToken);\r\n           get().setUser(user);\r\n-        } else {\r\n-          throw new Error(response.data.message || \"登录失败\");\r\n+        } catch (error) {\r\n+          // 清除可能存在的旧 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n         }\r\n       },\r\n \r\n       logout: async () => {\r\n@@ -71,14 +76,18 @@\n         if (!currentRefreshToken) {\r\n           throw new Error(\"No refresh token available\");\r\n         }\r\n \r\n-        const response = await authApi.refreshToken(currentRefreshToken);\r\n-        if (response.data.code === 200) {\r\n-          const { accessToken, refreshToken } = response.data.data;\r\n+        try {\r\n+          const { accessToken, refreshToken } = await authApi.refreshToken(\r\n+            currentRefreshToken\r\n+          );\r\n           get().setTokens(accessToken, refreshToken);\r\n-        } else {\r\n-          throw new Error(response.data.message || \"刷新 token 失败\");\r\n+        } catch (error) {\r\n+          // 刷新失败时清除 token\r\n+          localStorage.removeItem(\"accessToken\");\r\n+          localStorage.removeItem(\"refreshToken\");\r\n+          throw error;\r\n         }\r\n       },\r\n     }),\r\n     {\r\n"
                }
            ],
            "date": 1746086874861,
            "name": "Commit-0",
            "content": "import type { IUserInfo } from \"@/types/api/common\";\r\nimport { authApi } from \"@/api/modules/auth\";\r\nimport { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\";\r\n\r\ninterface IAuthState {\r\n  token: string | null;\r\n  refreshToken: string | null;\r\n  user: IUserInfo | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\ninterface IAuthActions {\r\n  setTokens: (token: string, refreshToken: string) => void;\r\n  setUser: (user: IUserInfo) => void;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  refreshTokens: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<IAuthState & IAuthActions>()(\r\n  persist(\r\n    (set, get) => ({\r\n      // State\r\n      token: null,\r\n      refreshToken: null,\r\n      user: null,\r\n      isAuthenticated: false,\r\n\r\n      // Actions\r\n      setTokens: (token: string, refreshToken: string) => {\r\n        set({ token, refreshToken, isAuthenticated: true });\r\n      },\r\n\r\n      setUser: (user: IUserInfo) => {\r\n        set({ user });\r\n      },\r\n\r\n      login: async (username: string, password: string) => {\r\n        const response = await authApi.login({ username, password });\r\n        const { token, refreshToken, user } = response.data;\r\n        get().setTokens(token, refreshToken);\r\n        get().setUser(user);\r\n      },\r\n\r\n      logout: async () => {\r\n        try {\r\n          await authApi.logout();\r\n        } finally {\r\n          set({\r\n            token: null,\r\n            refreshToken: null,\r\n            user: null,\r\n            isAuthenticated: false,\r\n          });\r\n        }\r\n      },\r\n\r\n      refreshTokens: async () => {\r\n        const currentRefreshToken = get().refreshToken;\r\n        if (!currentRefreshToken) {\r\n          throw new Error(\"No refresh token available\");\r\n        }\r\n\r\n        const response = await authApi.refreshToken(currentRefreshToken);\r\n        const { token } = response.data;\r\n        set({ token });\r\n      },\r\n    }),\r\n    {\r\n      name: \"auth-storage\",\r\n      partialize: (state) => ({\r\n        token: state.token,\r\n        refreshToken: state.refreshToken,\r\n        user: state.user,\r\n      }),\r\n    }\r\n  )\r\n);\r\n"
        }
    ]
}