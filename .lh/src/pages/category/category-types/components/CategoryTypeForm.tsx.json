{
    "sourceFile": "src/pages/category/category-types/components/CategoryTypeForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1746097878018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746107505586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,134 +1,104 @@\n-import { Form, Input, Modal, Select, message } from \"antd\";\r\n-import type {\r\n-  ICategoryType,\r\n-  ICreateCategoryTypeParams,\r\n-  IUpdateCategoryTypeParams,\r\n-} from \"@/types/api/category-type\";\r\n+import { Button, Card, Form, Input, Select, message } from \"antd\";\r\n import {\r\n   createCategoryType,\r\n+  getCategoryType,\r\n   updateCategoryType,\r\n } from \"@/api/modules/category-type\";\r\n+import { useNavigate, useParams } from \"react-router-dom\";\r\n+import { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n \r\n-import { useEffect } from \"react\";\r\n-import { useMutation } from \"@tanstack/react-query\";\r\n+import type { ICategoryType } from \"@/types/api/category-type\";\r\n+import type { IResponse } from \"@/types/api/common\";\r\n \r\n-interface ICategoryTypeFormProps {\r\n-  visible: boolean;\r\n-  editingCategoryType: ICategoryType | null;\r\n-  onCancel: () => void;\r\n-  onSuccess: () => void;\r\n-}\r\n+const CategoryTypeForm = () => {\r\n+  const navigate = useNavigate();\r\n+  const { id } = useParams<{ id: string }>();\r\n+  const queryClient = useQueryClient();\r\n+  const [form] = Form.useForm();\r\n \r\n-const CategoryTypeForm: React.FC<ICategoryTypeFormProps> = ({\r\n-  visible,\r\n-  editingCategoryType,\r\n-  onCancel,\r\n-  onSuccess,\r\n-}) => {\r\n-  const [form] = Form.useForm<ICreateCategoryTypeParams>();\r\n-\r\n-  // 创建分类类型\r\n-  const createMutation = useMutation({\r\n-    mutationFn: (data: ICreateCategoryTypeParams) => createCategoryType(data),\r\n-    onSuccess: () => {\r\n-      message.success(\"创建成功\");\r\n-      onSuccess();\r\n-    },\r\n+  const { data: categoryTypeData } = useQuery<IResponse<ICategoryType>>({\r\n+    queryKey: [\"categoryType\", id],\r\n+    queryFn: () => getCategoryType(Number(id)),\r\n+    enabled: !!id,\r\n   });\r\n \r\n-  // 更新分类类型\r\n-  const updateMutation = useMutation({\r\n-    mutationFn: ({\r\n-      id,\r\n-      data,\r\n-    }: {\r\n-      id: number;\r\n-      data: IUpdateCategoryTypeParams;\r\n-    }) => updateCategoryType(id, data),\r\n-    onSuccess: () => {\r\n-      message.success(\"更新成功\");\r\n-      onSuccess();\r\n-    },\r\n-  });\r\n-\r\n-  // 监听表单可见性变化\r\n-  useEffect(() => {\r\n-    if (visible) {\r\n-      if (editingCategoryType) {\r\n-        form.setFieldsValue(editingCategoryType);\r\n-      } else {\r\n-        form.resetFields();\r\n-      }\r\n-    }\r\n-  }, [visible, editingCategoryType, form]);\r\n-\r\n-  // 处理表单提交\r\n-  const handleSubmit = async () => {\r\n+  const handleSubmit = async (values: any) => {\r\n     try {\r\n-      const values = await form.validateFields();\r\n-      if (editingCategoryType) {\r\n-        updateMutation.mutate({\r\n-          id: editingCategoryType.id,\r\n-          data: values,\r\n-        });\r\n+      if (id) {\r\n+        await updateCategoryType(Number(id), values);\r\n+        message.success(\"更新成功\");\r\n       } else {\r\n-        createMutation.mutate(values);\r\n+        await createCategoryType(values);\r\n+        message.success(\"创建成功\");\r\n       }\r\n-    } catch (error) {\r\n-      // 表单验证失败\r\n-      console.error(\"Validate Failed:\", error);\r\n+      queryClient.invalidateQueries({ queryKey: [\"categoryTypes\"] });\r\n+      navigate(\"/category/category-types\");\r\n+    } catch (err) {\r\n+      message.error(id ? \"更新失败\" : \"创建失败\");\r\n+      console.error(err);\r\n     }\r\n   };\r\n \r\n   return (\r\n-    <Modal\r\n-      title={editingCategoryType ? \"编辑分类类型\" : \"新增分类类型\"}\r\n-      open={visible}\r\n-      onCancel={onCancel}\r\n-      onOk={handleSubmit}\r\n-      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n-    >\r\n-      <Form<ICreateCategoryTypeParams>\r\n+    <Card title={id ? \"编辑分类类型\" : \"新增分类类型\"}>\r\n+      <Form\r\n         form={form}\r\n         layout=\"vertical\"\r\n-        initialValues={{ status: 1 }}\r\n+        onFinish={handleSubmit}\r\n+        initialValues={\r\n+          id\r\n+            ? {\r\n+                name: categoryTypeData?.data.name,\r\n+                code: categoryTypeData?.data.code,\r\n+                description: categoryTypeData?.data.description,\r\n+                status: categoryTypeData?.data.status,\r\n+              }\r\n+            : {\r\n+                status: 1,\r\n+              }\r\n+        }\r\n       >\r\n         <Form.Item\r\n+          label=\"类型名称\"\r\n           name=\"name\"\r\n-          label=\"分类类型名称\"\r\n-          rules={[{ required: true, message: \"请输入分类类型名称\" }]}\r\n+          rules={[{ required: true, message: \"请输入类型名称\" }]}\r\n         >\r\n-          <Input placeholder=\"请输入分类类型名称\" />\r\n+          <Input placeholder=\"请输入类型名称\" />\r\n         </Form.Item>\r\n \r\n         <Form.Item\r\n+          label=\"类型编码\"\r\n           name=\"code\"\r\n-          label=\"分类类型编码\"\r\n-          rules={[{ required: true, message: \"请输入分类类型编码\" }]}\r\n+          rules={[{ required: true, message: \"请输入类型编码\" }]}\r\n         >\r\n-          <Input placeholder=\"请输入分类类型编码\" />\r\n+          <Input placeholder=\"请输入类型编码\" />\r\n         </Form.Item>\r\n \r\n-        <Form.Item name=\"description\" label=\"描述\">\r\n+        <Form.Item label=\"描述\" name=\"description\">\r\n           <Input.TextArea placeholder=\"请输入描述\" />\r\n         </Form.Item>\r\n \r\n         <Form.Item\r\n+          label=\"状态\"\r\n           name=\"status\"\r\n-          label=\"状态\"\r\n           rules={[{ required: true, message: \"请选择状态\" }]}\r\n         >\r\n           <Select\r\n-            placeholder=\"请选择状态\"\r\n             options={[\r\n               { label: \"启用\", value: 1 },\r\n               { label: \"禁用\", value: 0 },\r\n             ]}\r\n           />\r\n         </Form.Item>\r\n+\r\n+        <Form.Item>\r\n+          <Button type=\"primary\" htmlType=\"submit\">\r\n+            {id ? \"更新\" : \"创建\"}\r\n+          </Button>\r\n+        </Form.Item>\r\n       </Form>\r\n-    </Modal>\r\n+    </Card>\r\n   );\r\n };\r\n \r\n export default CategoryTypeForm;\r\n"
                },
                {
                    "date": 1746107535302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,32 @@\n import { Button, Card, Form, Input, Select, message } from \"antd\";\r\n+import type {\r\n+  ICategoryType,\r\n+  ICreateCategoryTypeParams,\r\n+} from \"@/types/api/category-type\";\r\n import {\r\n   createCategoryType,\r\n   getCategoryType,\r\n   updateCategoryType,\r\n } from \"@/api/modules/category-type\";\r\n import { useNavigate, useParams } from \"react-router-dom\";\r\n import { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n \r\n-import type { ICategoryType } from \"@/types/api/category-type\";\r\n import type { IResponse } from \"@/types/api/common\";\r\n \r\n const CategoryTypeForm = () => {\r\n   const navigate = useNavigate();\r\n   const { id } = useParams<{ id: string }>();\r\n   const queryClient = useQueryClient();\r\n-  const [form] = Form.useForm();\r\n+  const [form] = Form.useForm<ICreateCategoryTypeParams>();\r\n \r\n-  const { data: categoryTypeData } = useQuery<IResponse<ICategoryType>>({\r\n+  const { data: categoryTypeData } = useQuery({\r\n     queryKey: [\"categoryType\", id],\r\n     queryFn: () => getCategoryType(Number(id)),\r\n     enabled: !!id,\r\n   });\r\n \r\n-  const handleSubmit = async (values: any) => {\r\n+  const handleSubmit = async (values: ICreateCategoryTypeParams) => {\r\n     try {\r\n       if (id) {\r\n         await updateCategoryType(Number(id), values);\r\n         message.success(\"更新成功\");\r\n@@ -47,12 +50,12 @@\n         onFinish={handleSubmit}\r\n         initialValues={\r\n           id\r\n             ? {\r\n-                name: categoryTypeData?.data.name,\r\n-                code: categoryTypeData?.data.code,\r\n-                description: categoryTypeData?.data.description,\r\n-                status: categoryTypeData?.data.status,\r\n+                name: categoryTypeData?.name,\r\n+                code: categoryTypeData?.code,\r\n+                description: categoryTypeData?.description,\r\n+                status: categoryTypeData?.status,\r\n               }\r\n             : {\r\n                 status: 1,\r\n               }\r\n"
                },
                {
                    "date": 1746107563554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,14 @@\n import { Button, Card, Form, Input, Select, message } from \"antd\";\r\n-import type {\r\n-  ICategoryType,\r\n-  ICreateCategoryTypeParams,\r\n-} from \"@/types/api/category-type\";\r\n import {\r\n   createCategoryType,\r\n   getCategoryType,\r\n   updateCategoryType,\r\n } from \"@/api/modules/category-type\";\r\n import { useNavigate, useParams } from \"react-router-dom\";\r\n import { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n \r\n-import type { IResponse } from \"@/types/api/common\";\r\n+import type { ICreateCategoryTypeParams } from \"@/types/api/category-type\";\r\n \r\n const CategoryTypeForm = () => {\r\n   const navigate = useNavigate();\r\n   const { id } = useParams<{ id: string }>();\r\n"
                },
                {
                    "date": 1746112386199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,8 @@\n             ? {\r\n                 name: categoryTypeData?.name,\r\n                 code: categoryTypeData?.code,\r\n                 description: categoryTypeData?.description,\r\n-                status: categoryTypeData?.status,\r\n               }\r\n             : {\r\n                 status: 1,\r\n               }\r\n"
                },
                {
                    "date": 1746112449149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,21 +75,10 @@\n         <Form.Item label=\"描述\" name=\"description\">\r\n           <Input.TextArea placeholder=\"请输入描述\" />\r\n         </Form.Item>\r\n \r\n-        <Form.Item\r\n-          label=\"状态\"\r\n-          name=\"status\"\r\n-          rules={[{ required: true, message: \"请选择状态\" }]}\r\n-        >\r\n-          <Select\r\n-            options={[\r\n-              { label: \"启用\", value: 1 },\r\n-              { label: \"禁用\", value: 0 },\r\n-            ]}\r\n-          />\r\n-        </Form.Item>\r\n \r\n+\r\n         <Form.Item>\r\n           <Button type=\"primary\" htmlType=\"submit\">\r\n             {id ? \"更新\" : \"创建\"}\r\n           </Button>\r\n"
                },
                {
                    "date": 1746112476023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n                 code: categoryTypeData?.code,\r\n                 description: categoryTypeData?.description,\r\n               }\r\n             : {\r\n-                status: 1,\r\n               }\r\n         }\r\n       >\r\n         <Form.Item\r\n"
                },
                {
                    "date": 1746112497013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Button, Card, Form, Input, Select, message } from \"antd\";\r\n+import { Button, Card, Form, Input, message } from \"antd\";\r\n import {\r\n   createCategoryType,\r\n   getCategoryType,\r\n   updateCategoryType,\r\n"
                },
                {
                    "date": 1746137233027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,103 @@\n-import { Button, Card, Form, Input, message } from \"antd\";\r\n-import {\r\n-  createCategoryType,\r\n-  getCategoryType,\r\n-  updateCategoryType,\r\n-} from \"@/api/modules/category-type\";\r\n-import { useNavigate, useParams } from \"react-router-dom\";\r\n-import { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n+import { Form, Input, Modal, message } from \"antd\";\r\n+import type {\r\n+  ICategoryType,\r\n+  ICreateCategoryTypeParams,\r\n+  IUpdateCategoryTypeParams,\r\n+} from \"@/types/api/category-type\";\r\n+import { createCategoryType, updateCategoryType } from \"@/api/modules/category-type\";\r\n \r\n-import type { ICreateCategoryTypeParams } from \"@/types/api/category-type\";\r\n+import { useEffect } from \"react\";\r\n+import { useMutation } from \"@tanstack/react-query\";\r\n \r\n-const CategoryTypeForm = () => {\r\n-  const navigate = useNavigate();\r\n-  const { id } = useParams<{ id: string }>();\r\n-  const queryClient = useQueryClient();\r\n-  const [form] = Form.useForm<ICreateCategoryTypeParams>();\r\n+interface ICategoryTypeFormProps {\r\n+  visible: boolean;\r\n+  editingCategoryType: ICategoryType | null;\r\n+  onCancel: () => void;\r\n+  onSuccess: () => void;\r\n+}\r\n \r\n-  const { data: categoryTypeData } = useQuery({\r\n-    queryKey: [\"categoryType\", id],\r\n-    queryFn: () => getCategoryType(Number(id)),\r\n-    enabled: !!id,\r\n+const CategoryTypeForm: React.FC<ICategoryTypeFormProps> = ({\r\n+  visible,\r\n+  editingCategoryType,\r\n+  onCancel,\r\n+  onSuccess,\r\n+}) => {\r\n+  const [form] = Form.useForm();\r\n+\r\n+  // 创建分类类型\r\n+  const createMutation = useMutation({\r\n+    mutationFn: (data: ICreateCategoryTypeParams) => createCategoryType(data),\r\n+    onSuccess: () => {\r\n+      message.success(\"创建成功\");\r\n+      onSuccess();\r\n+    },\r\n   });\r\n \r\n-  const handleSubmit = async (values: ICreateCategoryTypeParams) => {\r\n+  // 更新分类类型\r\n+  const updateMutation = useMutation({\r\n+    mutationFn: ({ id, data }: { id: number; data: IUpdateCategoryTypeParams }) =>\r\n+      updateCategoryType(id, data),\r\n+    onSuccess: () => {\r\n+      message.success(\"更新成功\");\r\n+      onSuccess();\r\n+    },\r\n+  });\r\n+\r\n+  // 监听表单可见性变化\r\n+  useEffect(() => {\r\n+    if (visible) {\r\n+      if (editingCategoryType) {\r\n+        form.setFieldsValue(editingCategoryType);\r\n+      } else {\r\n+        form.resetFields();\r\n+      }\r\n+    }\r\n+  }, [visible, editingCategoryType, form]);\r\n+\r\n+  // 处理表单提交\r\n+  const handleSubmit = async () => {\r\n     try {\r\n-      if (id) {\r\n-        await updateCategoryType(Number(id), values);\r\n-        message.success(\"更新成功\");\r\n+      const values = await form.validateFields();\r\n+      if (editingCategoryType) {\r\n+        updateMutation.mutate({\r\n+          id: editingCategoryType.id,\r\n+          data: values,\r\n+        });\r\n       } else {\r\n-        await createCategoryType(values);\r\n-        message.success(\"创建成功\");\r\n+        createMutation.mutate(values);\r\n       }\r\n-      queryClient.invalidateQueries({ queryKey: [\"categoryTypes\"] });\r\n-      navigate(\"/category/category-types\");\r\n-    } catch (err) {\r\n-      message.error(id ? \"更新失败\" : \"创建失败\");\r\n-      console.error(err);\r\n+    } catch (error) {\r\n+      console.error(\"Validate Failed:\", error);\r\n     }\r\n   };\r\n \r\n   return (\r\n-    <Card title={id ? \"编辑分类类型\" : \"新增分类类型\"}>\r\n-      <Form\r\n-        form={form}\r\n-        layout=\"vertical\"\r\n-        onFinish={handleSubmit}\r\n-        initialValues={\r\n-          id\r\n-            ? {\r\n-                name: categoryTypeData?.name,\r\n-                code: categoryTypeData?.code,\r\n-                description: categoryTypeData?.description,\r\n-              }\r\n-            : {}\r\n-        }\r\n-      >\r\n+    <Modal\r\n+      title={editingCategoryType ? \"编辑分类类型\" : \"新增分类类型\"}\r\n+      open={visible}\r\n+      onOk={handleSubmit}\r\n+      onCancel={onCancel}\r\n+      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n+    >\r\n+      <Form form={form} layout=\"vertical\">\r\n         <Form.Item\r\n+          name=\"name\"\r\n           label=\"类型名称\"\r\n-          name=\"name\"\r\n           rules={[{ required: true, message: \"请输入类型名称\" }]}\r\n         >\r\n           <Input placeholder=\"请输入类型名称\" />\r\n         </Form.Item>\r\n \r\n         <Form.Item\r\n+          name=\"code\"\r\n           label=\"类型编码\"\r\n-          name=\"code\"\r\n           rules={[{ required: true, message: \"请输入类型编码\" }]}\r\n         >\r\n           <Input placeholder=\"请输入类型编码\" />\r\n         </Form.Item>\r\n-\r\n-        <Form.Item label=\"描述\" name=\"description\">\r\n-          <Input.TextArea placeholder=\"请输入描述\" />\r\n-        </Form.Item>\r\n-\r\n-        <Form.Item>\r\n-          <Button type=\"primary\" htmlType=\"submit\">\r\n-            {id ? \"更新\" : \"创建\"}\r\n-          </Button>\r\n-        </Form.Item>\r\n       </Form>\r\n-    </Card>\r\n+    </Modal>\r\n   );\r\n };\r\n \r\n export default CategoryTypeForm;\r\n"
                },
                {
                    "date": 1746145509328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,82 @@\n import { Form, Input, Modal, message } from \"antd\";\r\n-import type {\r\n-  ICategoryType,\r\n-  ICreateCategoryTypeParams,\r\n-  IUpdateCategoryTypeParams,\r\n-} from \"@/types/api/category-type\";\r\n import {\r\n   createCategoryType,\r\n   updateCategoryType,\r\n } from \"@/api/modules/category-type\";\r\n+import { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\n \r\n-import { useEffect } from \"react\";\r\n-import { useMutation } from \"@tanstack/react-query\";\r\n+import type { ICategoryType } from \"@/types/api/category-type\";\r\n \r\n-interface ICategoryTypeFormProps {\r\n+interface CategoryTypeFormProps {\r\n   visible: boolean;\r\n   editingCategoryType: ICategoryType | null;\r\n   onCancel: () => void;\r\n   onSuccess: () => void;\r\n }\r\n \r\n-const CategoryTypeForm: React.FC<ICategoryTypeFormProps> = ({\r\n+const CategoryTypeForm = ({\r\n   visible,\r\n   editingCategoryType,\r\n   onCancel,\r\n   onSuccess,\r\n-}) => {\r\n+}: CategoryTypeFormProps) => {\r\n   const [form] = Form.useForm();\r\n+  const queryClient = useQueryClient();\r\n \r\n-  // 创建分类类型\r\n-  const createMutation = useMutation({\r\n-    mutationFn: (data: ICreateCategoryTypeParams) => createCategoryType(data),\r\n+  // 创建或更新分类类型\r\n+  const mutation = useMutation({\r\n+    mutationFn: (values: Partial<ICategoryType>) =>\r\n+      editingCategoryType\r\n+        ? updateCategoryType(editingCategoryType.id, values)\r\n+        : createCategoryType(values),\r\n     onSuccess: () => {\r\n-      message.success(\"创建成功\");\r\n+      message.success(`${editingCategoryType ? \"更新\" : \"创建\"}分类类型成功`);\r\n+      queryClient.invalidateQueries({ queryKey: [\"categoryTypes\"] });\r\n       onSuccess();\r\n     },\r\n   });\r\n \r\n-  // 更新分类类型\r\n-  const updateMutation = useMutation({\r\n-    mutationFn: ({\r\n-      id,\r\n-      data,\r\n-    }: {\r\n-      id: number;\r\n-      data: IUpdateCategoryTypeParams;\r\n-    }) => updateCategoryType(id, data),\r\n-    onSuccess: () => {\r\n-      message.success(\"更新成功\");\r\n-      onSuccess();\r\n-    },\r\n-  });\r\n-\r\n-  // 监听表单可见性变化\r\n-  useEffect(() => {\r\n-    if (visible) {\r\n-      if (editingCategoryType) {\r\n-        form.setFieldsValue(editingCategoryType);\r\n-      } else {\r\n-        form.resetFields();\r\n-      }\r\n-    }\r\n-  }, [visible, editingCategoryType, form]);\r\n-\r\n-  // 处理表单提交\r\n-  const handleSubmit = async () => {\r\n+  const handleOk = async () => {\r\n     try {\r\n       const values = await form.validateFields();\r\n-      if (editingCategoryType) {\r\n-        updateMutation.mutate({\r\n-          id: editingCategoryType.id,\r\n-          data: values,\r\n-        });\r\n-      } else {\r\n-        createMutation.mutate(values);\r\n-      }\r\n+      mutation.mutate(values);\r\n     } catch (error) {\r\n-      console.error(\"Validate Failed:\", error);\r\n+      console.error(\"验证失败:\", error);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <Modal\r\n-      title={editingCategoryType ? \"编辑分类类型\" : \"新增分类类型\"}\r\n+      title={`${editingCategoryType ? \"编辑\" : \"新增\"}分类类型`}\r\n       open={visible}\r\n-      onOk={handleSubmit}\r\n+      onOk={handleOk}\r\n       onCancel={onCancel}\r\n-      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n+      confirmLoading={mutation.isPending}\r\n+      destroyOnClose\r\n     >\r\n-      <Form form={form} layout=\"vertical\">\r\n+      <Form\r\n+        form={form}\r\n+        initialValues={editingCategoryType || {}}\r\n+        preserve={false}\r\n+      >\r\n         <Form.Item\r\n           name=\"name\"\r\n           label=\"类型名称\"\r\n           rules={[{ required: true, message: \"请输入类型名称\" }]}\r\n         >\r\n           <Input placeholder=\"请输入类型名称\" />\r\n         </Form.Item>\r\n-\r\n         <Form.Item\r\n           name=\"code\"\r\n           label=\"类型编码\"\r\n           rules={[{ required: true, message: \"请输入类型编码\" }]}\r\n         >\r\n           <Input placeholder=\"请输入类型编码\" />\r\n         </Form.Item>\r\n+        <Form.Item name=\"description\" label=\"描述\">\r\n+          <Input.TextArea placeholder=\"请输入描述\" />\r\n+        </Form.Item>\r\n       </Form>\r\n     </Modal>\r\n   );\r\n };\r\n"
                }
            ],
            "date": 1746097878018,
            "name": "Commit-0",
            "content": "import { Form, Input, Modal, Select, message } from \"antd\";\r\nimport type {\r\n  ICategoryType,\r\n  ICreateCategoryTypeParams,\r\n  IUpdateCategoryTypeParams,\r\n} from \"@/types/api/category-type\";\r\nimport {\r\n  createCategoryType,\r\n  updateCategoryType,\r\n} from \"@/api/modules/category-type\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\n\r\ninterface ICategoryTypeFormProps {\r\n  visible: boolean;\r\n  editingCategoryType: ICategoryType | null;\r\n  onCancel: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\nconst CategoryTypeForm: React.FC<ICategoryTypeFormProps> = ({\r\n  visible,\r\n  editingCategoryType,\r\n  onCancel,\r\n  onSuccess,\r\n}) => {\r\n  const [form] = Form.useForm<ICreateCategoryTypeParams>();\r\n\r\n  // 创建分类类型\r\n  const createMutation = useMutation({\r\n    mutationFn: (data: ICreateCategoryTypeParams) => createCategoryType(data),\r\n    onSuccess: () => {\r\n      message.success(\"创建成功\");\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 更新分类类型\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({\r\n      id,\r\n      data,\r\n    }: {\r\n      id: number;\r\n      data: IUpdateCategoryTypeParams;\r\n    }) => updateCategoryType(id, data),\r\n    onSuccess: () => {\r\n      message.success(\"更新成功\");\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 监听表单可见性变化\r\n  useEffect(() => {\r\n    if (visible) {\r\n      if (editingCategoryType) {\r\n        form.setFieldsValue(editingCategoryType);\r\n      } else {\r\n        form.resetFields();\r\n      }\r\n    }\r\n  }, [visible, editingCategoryType, form]);\r\n\r\n  // 处理表单提交\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      if (editingCategoryType) {\r\n        updateMutation.mutate({\r\n          id: editingCategoryType.id,\r\n          data: values,\r\n        });\r\n      } else {\r\n        createMutation.mutate(values);\r\n      }\r\n    } catch (error) {\r\n      // 表单验证失败\r\n      console.error(\"Validate Failed:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={editingCategoryType ? \"编辑分类类型\" : \"新增分类类型\"}\r\n      open={visible}\r\n      onCancel={onCancel}\r\n      onOk={handleSubmit}\r\n      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n    >\r\n      <Form<ICreateCategoryTypeParams>\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={{ status: 1 }}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"分类类型名称\"\r\n          rules={[{ required: true, message: \"请输入分类类型名称\" }]}\r\n        >\r\n          <Input placeholder=\"请输入分类类型名称\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"code\"\r\n          label=\"分类类型编码\"\r\n          rules={[{ required: true, message: \"请输入分类类型编码\" }]}\r\n        >\r\n          <Input placeholder=\"请输入分类类型编码\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"description\" label=\"描述\">\r\n          <Input.TextArea placeholder=\"请输入描述\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"status\"\r\n          label=\"状态\"\r\n          rules={[{ required: true, message: \"请选择状态\" }]}\r\n        >\r\n          <Select\r\n            placeholder=\"请选择状态\"\r\n            options={[\r\n              { label: \"启用\", value: 1 },\r\n              { label: \"禁用\", value: 0 },\r\n            ]}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CategoryTypeForm;\r\n"
        }
    ]
}