{
    "sourceFile": "src/pages/category/categories/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746097931733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746099073836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,15 +227,15 @@\n         </div>\r\n \r\n         <Table\r\n           columns={columns}\r\n-          dataSource={categoriesData?.data.list}\r\n+          dataSource={categoriesData?.list}\r\n           rowKey=\"id\"\r\n           loading={isLoading}\r\n           pagination={{\r\n             current: currentPage,\r\n             pageSize,\r\n-            total: categoriesData?.data.pagination?.total || 0,\r\n+            total: categoriesData?.pagination?.total || 0,\r\n             onChange: (page, size) => {\r\n               setCurrentPage(page);\r\n               setPageSize(size);\r\n             },\r\n"
                },
                {
                    "date": 1746106875712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,263 +1,132 @@\n-import {\r\n-  Button,\r\n-  Card,\r\n-  Form,\r\n-  Input,\r\n-  Modal,\r\n-  Select,\r\n-  Space,\r\n-  Table,\r\n-  Tag,\r\n-  message,\r\n-} from \"antd\";\r\n-import type { ICategory, ICategoryQueryParams } from \"@/types/api/category\";\r\n-import {\r\n-  deleteCategory,\r\n-  getCategories,\r\n-  toggleCategoryStatus,\r\n-} from \"@/api/modules/category\";\r\n-import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n-\r\n-import CategoryForm from \"./components/CategoryForm\";\r\n-import { getCategoryTypes } from \"@/api/modules/category-type\";\r\n-import styles from \"./style.module.less\";\r\n-import { useState } from \"react\";\r\n-\r\n-const { confirm } = Modal;\r\n-\r\n-const Categories = () => {\r\n-  const queryClient = useQueryClient();\r\n-  const [form] = Form.useForm<ICategoryQueryParams>();\r\n-  const [modalVisible, setModalVisible] = useState(false);\r\n-  const [editingCategory, setEditingCategory] = useState<ICategory | null>(\r\n-    null\r\n-  );\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-  const [pageSize, setPageSize] = useState(10);\r\n-  const [searchValues, setSearchValues] = useState<\r\n-    Partial<ICategoryQueryParams>\r\n-  >({});\r\n-\r\n-  // 获取分类列表\r\n-  const { data: categoriesData, isLoading } = useQuery({\r\n-    queryKey: [\"categories\", currentPage, pageSize, searchValues],\r\n-    queryFn: () =>\r\n-      getCategories({\r\n-        page: currentPage,\r\n-        pageSize,\r\n-        ...searchValues,\r\n-      }),\r\n-  });\r\n-\r\n-  // 获取分类类型列表\r\n-  const { data: categoryTypesData } = useQuery({\r\n-    queryKey: [\"categoryTypes\"],\r\n-    queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\r\n-  });\r\n-\r\n-  // 删除分类\r\n-  const deleteMutation = useMutation({\r\n-    mutationFn: deleteCategory,\r\n-    onSuccess: () => {\r\n-      message.success(\"删除成功\");\r\n-      queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n-    },\r\n-  });\r\n-\r\n-  // 切换分类状态\r\n-  const toggleStatusMutation = useMutation({\r\n-    mutationFn: toggleCategoryStatus,\r\n-    onSuccess: () => {\r\n-      message.success(\"状态更新成功\");\r\n-      queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n-    },\r\n-  });\r\n-\r\n-  // 处理删除分类\r\n-  const handleDelete = (id: number) => {\r\n-    confirm({\r\n-      title: \"确认删除\",\r\n-      content: \"确定要删除这个分类吗？此操作不可恢复。\",\r\n-      okText: \"确认\",\r\n-      cancelText: \"取消\",\r\n-      onOk: () => deleteMutation.mutate(id),\r\n-    });\r\n-  };\r\n-\r\n-  // 处理切换分类状态\r\n-  const handleToggleStatus = (id: number) => {\r\n-    toggleStatusMutation.mutate(id);\r\n-  };\r\n-\r\n-  // 表格列配置\r\n-  const columns = [\r\n-    {\r\n-      title: \"分类名称\",\r\n-      dataIndex: \"name\",\r\n-      key: \"name\",\r\n-    },\r\n-    {\r\n-      title: \"分类编码\",\r\n-      dataIndex: \"code\",\r\n-      key: \"code\",\r\n-    },\r\n-    {\r\n-      title: \"分类类型\",\r\n-      dataIndex: [\"type\", \"name\"],\r\n-      key: \"type\",\r\n-    },\r\n-    {\r\n-      title: \"描述\",\r\n-      dataIndex: \"description\",\r\n-      key: \"description\",\r\n-    },\r\n-    {\r\n-      title: \"排序\",\r\n-      dataIndex: \"sort\",\r\n-      key: \"sort\",\r\n-    },\r\n-    {\r\n-      title: \"状态\",\r\n-      dataIndex: \"status\",\r\n-      key: \"status\",\r\n-      render: (status: number) => (\r\n-        <Tag color={status === 1 ? \"success\" : \"error\"}>\r\n-          {status === 1 ? \"启用\" : \"禁用\"}\r\n-        </Tag>\r\n-      ),\r\n-    },\r\n-    {\r\n-      title: \"创建时间\",\r\n-      dataIndex: \"createdAt\",\r\n-      key: \"createdAt\",\r\n-    },\r\n-    {\r\n-      title: \"操作\",\r\n-      key: \"action\",\r\n-      render: (_: unknown, record: ICategory) => (\r\n-        <Space size=\"middle\">\r\n-          <Button\r\n-            type=\"link\"\r\n-            onClick={() => {\r\n-              setEditingCategory(record);\r\n-              setModalVisible(true);\r\n-            }}\r\n-          >\r\n-            编辑\r\n-          </Button>\r\n-          <Button type=\"link\" onClick={() => handleToggleStatus(record.id)}>\r\n-            {record.status === 1 ? \"禁用\" : \"启用\"}\r\n-          </Button>\r\n-          <Button type=\"link\" danger onClick={() => handleDelete(record.id)}>\r\n-            删除\r\n-          </Button>\r\n-        </Space>\r\n-      ),\r\n-    },\r\n-  ];\r\n-\r\n-  // 处理搜索\r\n-  const handleSearch = (values: Partial<ICategoryQueryParams>) => {\r\n-    setCurrentPage(1);\r\n-    setSearchValues(values);\r\n-  };\r\n-\r\n-  // 处理重置\r\n-  const handleReset = () => {\r\n-    form.resetFields();\r\n-    setCurrentPage(1);\r\n-    setSearchValues({});\r\n-  };\r\n-\r\n-  return (\r\n-    <div className={styles.container}>\r\n-      <Card>\r\n-        <Form<ICategoryQueryParams>\r\n-          form={form}\r\n-          layout=\"inline\"\r\n-          className={styles.searchForm}\r\n-          onFinish={handleSearch}\r\n-        >\r\n-          <Form.Item name=\"name\" label=\"分类名称\">\r\n-            <Input placeholder=\"请输入分类名称\" allowClear />\r\n-          </Form.Item>\r\n-          <Form.Item name=\"code\" label=\"分类编码\">\r\n-            <Input placeholder=\"请输入分类编码\" allowClear />\r\n-          </Form.Item>\r\n-          <Form.Item name=\"typeId\" label=\"分类类型\">\r\n-            <Select\r\n-              placeholder=\"请选择分类类型\"\r\n-              allowClear\r\n-              options={categoryTypesData?.data.list.map((type) => ({\r\n-                label: type.name,\r\n-                value: type.id,\r\n-              }))}\r\n-            />\r\n-          </Form.Item>\r\n-          <Form.Item name=\"status\" label=\"状态\">\r\n-            <Select\r\n-              placeholder=\"请选择状态\"\r\n-              allowClear\r\n-              options={[\r\n-                { label: \"启用\", value: 1 },\r\n-                { label: \"禁用\", value: 0 },\r\n-              ]}\r\n-            />\r\n-          </Form.Item>\r\n-          <Form.Item>\r\n-            <Space>\r\n-              <Button type=\"primary\" htmlType=\"submit\">\r\n-                搜索\r\n-              </Button>\r\n-              <Button onClick={handleReset}>重置</Button>\r\n-            </Space>\r\n-          </Form.Item>\r\n-        </Form>\r\n-\r\n-        <div className={styles.tableHeader}>\r\n-          <Button\r\n-            type=\"primary\"\r\n-            onClick={() => {\r\n-              setEditingCategory(null);\r\n-              setModalVisible(true);\r\n-            }}\r\n-          >\r\n-            新增分类\r\n-          </Button>\r\n-        </div>\r\n-\r\n-        <Table\r\n-          columns={columns}\r\n-          dataSource={categoriesData?.list}\r\n-          rowKey=\"id\"\r\n-          loading={isLoading}\r\n-          pagination={{\r\n-            current: currentPage,\r\n-            pageSize,\r\n-            total: categoriesData?.pagination?.total || 0,\r\n-            onChange: (page, size) => {\r\n-              setCurrentPage(page);\r\n-              setPageSize(size);\r\n-            },\r\n-          }}\r\n-        />\r\n-      </Card>\r\n-\r\n-      <CategoryForm\r\n-        visible={modalVisible}\r\n-        editingCategory={editingCategory}\r\n-        onCancel={() => {\r\n-          setModalVisible(false);\r\n-          setEditingCategory(null);\r\n-        }}\r\n-        onSuccess={() => {\r\n-          setModalVisible(false);\r\n-          setEditingCategory(null);\r\n-          queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n-        }}\r\n-      />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Categories;\r\n+import { Button, Card, Form, Select, Space, Spin, Tree, message } from \"antd\";\n+import type { ICategory, ICategoryQueryParams } from \"@/types/api/category\";\n+import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n+\n+import CategoryForm from \"./components/CategoryForm\";\n+import type { DataNode } from \"antd/es/tree\";\n+import type { ICategoryType } from \"@/types/api/category-type\";\n+import { getCategoryTree } from \"@/api/modules/category\";\n+import { getCategoryTypes } from \"@/api/modules/category-type\";\n+import styles from \"./style.module.less\";\n+import { useState } from \"react\";\n+\n+const Categories = () => {\n+  const queryClient = useQueryClient();\n+  const [form] = Form.useForm<ICategoryQueryParams>();\n+  const [modalVisible, setModalVisible] = useState(false);\n+  const [editingCategory, setEditingCategory] = useState<ICategory | null>(\n+    null\n+  );\n+\n+  // 获取分类类型列表\n+  const { data: categoryTypesData } = useQuery({\n+    queryKey: [\"categoryTypes\"],\n+    queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\n+  });\n+\n+  // 获取分类树\n+  const { data: categoryTreeData, isLoading: isTreeLoading } = useQuery({\n+    queryKey: [\"categoryTree\"],\n+    queryFn: () => getCategoryTree(0), // 0 或不传，后端返回所有分类树\n+  });\n+\n+  // 增强 buildTreeData 的健壮性，调试输入类型\n+  const buildTreeData = (nodes: any = []): DataNode[] => {\n+    if (!Array.isArray(nodes)) {\n+      console.warn(\"buildTreeData received non-array:\", nodes);\n+      return [];\n+    }\n+    console.log(\"buildTreeData input:\", nodes);\n+    return nodes.map((node: any) => ({\n+      key: node.id,\n+      title: node.name,\n+      children: Array.isArray(node.children)\n+        ? buildTreeData(node.children)\n+        : [],\n+    }));\n+  };\n+\n+  console.log(categoryTreeData);\n+\n+  // 调试输出树数据\n+  const treeNodes = buildTreeData(categoryTreeData?.data || []);\n+  console.log(\"treeNodes:\", treeNodes);\n+\n+  // 处理搜索和重置（如需树形搜索可后续实现）\n+  const handleSearch = () => {\n+    // TODO: 如需支持树形搜索，可在此实现\n+    message.info(\"树形搜索功能可按需实现\");\n+  };\n+\n+  const handleReset = () => {\n+    form.resetFields();\n+    message.info(\"树形重置功能可按需实现\");\n+  };\n+\n+  return (\n+    <div className={styles.container}>\n+      <Card>\n+        <Form<ICategoryQueryParams>\n+          form={form}\n+          layout=\"inline\"\n+          className={styles.searchForm}\n+          onFinish={handleSearch}\n+        >\n+          <Form.Item name=\"typeId\" label=\"分类类型\">\n+            <Select\n+              placeholder=\"请选择分类类型\"\n+              allowClear\n+              options={\n+                categoryTypesData?.list?.map((type: ICategoryType) => ({\n+                  label: type.name,\n+                  value: type.id,\n+                })) || []\n+              }\n+            />\n+          </Form.Item>\n+          <Form.Item>\n+            <Space>\n+              <Button type=\"primary\" htmlType=\"submit\">\n+                搜索\n+              </Button>\n+              <Button onClick={handleReset}>重置</Button>\n+            </Space>\n+          </Form.Item>\n+        </Form>\n+\n+        <div className={styles.tableHeader}>\n+          <Button\n+            type=\"primary\"\n+            onClick={() => {\n+              setEditingCategory(null);\n+              setModalVisible(true);\n+            }}\n+          >\n+            新增分类\n+          </Button>\n+        </div>\n+\n+        {/* 树形分类展示 */}\n+        <Spin spinning={isTreeLoading}>\n+          <Tree treeData={treeNodes} defaultExpandAll />\n+        </Spin>\n+      </Card>\n+\n+      <CategoryForm\n+        visible={modalVisible}\n+        editingCategory={editingCategory}\n+        onCancel={() => {\n+          setModalVisible(false);\n+          setEditingCategory(null);\n+        }}\n+        onSuccess={() => {\n+          setModalVisible(false);\n+          setEditingCategory(null);\n+          queryClient.invalidateQueries({ queryKey: [\"categories\"] });\n+        }}\n+      />\n+    </div>\n+  );\n+};\n+\n+export default Categories;\n"
                },
                {
                    "date": 1746107112610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,24 @@\n-import { Button, Card, Form, Select, Space, Spin, Tree, message } from \"antd\";\n+import { Button, Card, Form, Modal, Select, Space, Spin, Tree, message } from \"antd\";\n import type { ICategory, ICategoryQueryParams } from \"@/types/api/category\";\n+import { deleteCategory, getCategories, toggleCategoryStatus } from '@/api/modules/category';\n+import { useCallback, useMemo } from 'react';\n import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n \n-import CategoryForm from \"./components/CategoryForm\";\n import type { DataNode } from \"antd/es/tree\";\n+import { ExclamationCircleOutlined } from '@ant-design/icons';\n import type { ICategoryType } from \"@/types/api/category-type\";\n+import { formatDateTime } from '@/utils/format';\n import { getCategoryTree } from \"@/api/modules/category\";\n import { getCategoryTypes } from \"@/api/modules/category-type\";\n import styles from \"./style.module.less\";\n+import { useNavigate } from 'react-router-dom';\n import { useState } from \"react\";\n \n+const { confirm } = Modal;\n+\n const Categories = () => {\n+  const navigate = useNavigate();\n   const queryClient = useQueryClient();\n   const [form] = Form.useForm<ICategoryQueryParams>();\n   const [modalVisible, setModalVisible] = useState(false);\n   const [editingCategory, setEditingCategory] = useState<ICategory | null>(\n@@ -29,24 +36,38 @@\n     queryKey: [\"categoryTree\"],\n     queryFn: () => getCategoryTree(0), // 0 或不传，后端返回所有分类树\n   });\n \n-  // 增强 buildTreeData 的健壮性，调试输入类型\n-  const buildTreeData = (nodes: any = []): DataNode[] => {\n-    if (!Array.isArray(nodes)) {\n-      console.warn(\"buildTreeData received non-array:\", nodes);\n-      return [];\n-    }\n-    console.log(\"buildTreeData input:\", nodes);\n-    return nodes.map((node: any) => ({\n-      key: node.id,\n-      title: node.name,\n-      children: Array.isArray(node.children)\n-        ? buildTreeData(node.children)\n-        : [],\n-    }));\n-  };\n+  const { data: categoriesData } = useQuery({\n+    queryKey: ['categories'],\n+    queryFn: () => getCategories({ page: 1, pageSize: 100 }),\n+  });\n \n+  const buildTreeData = useCallback((data: ICategory[]): ICategory[] => {\n+    const map = new Map<number, ICategory>();\n+    const result: ICategory[] = [];\n+\n+    data.forEach((node) => {\n+      map.set(node.id, { ...node, children: [] });\n+    });\n+\n+    data.forEach((node) => {\n+      const current = map.get(node.id);\n+      if (current) {\n+        if (node.parentId === 0) {\n+          result.push(current);\n+        } else {\n+          const parent = map.get(node.parentId);\n+          if (parent) {\n+            (parent.children as ICategory[]).push(current);\n+          }\n+        }\n+      }\n+    });\n+\n+    return result;\n+  }, []);\n+\n   console.log(categoryTreeData);\n \n   // 调试输出树数据\n   const treeNodes = buildTreeData(categoryTreeData?.data || []);\n"
                },
                {
                    "date": 1746107142794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n   Modal,\n   Select,\n   Space,\n   Spin,\n+  Table,\n+  Tag,\n   Tree,\n   message,\n } from \"antd\";\n import type { ICategory, ICategoryQueryParams } from \"@/types/api/category\";\n@@ -97,8 +99,105 @@\n     form.resetFields();\n     message.info(\"树形重置功能可按需实现\");\n   };\n \n+  const treeData = useMemo(() => {\n+    if (!categoriesData?.list) return [];\n+    return buildTreeData(categoriesData.list);\n+  }, [buildTreeData, categoriesData?.list]);\n+\n+  const handleDelete = useCallback(\n+    (id: number) => {\n+      confirm({\n+        title: \"确认删除\",\n+        icon: <ExclamationCircleOutlined />,\n+        content: \"确定要删除这个分类吗？\",\n+        okText: \"确定\",\n+        okType: \"danger\",\n+        cancelText: \"取消\",\n+        onOk: async () => {\n+          try {\n+            await deleteCategory(id);\n+            message.success(\"删除成功\");\n+            queryClient.invalidateQueries({ queryKey: [\"categories\"] });\n+          } catch (error) {\n+            message.error(\"删除失败\");\n+          }\n+        },\n+      });\n+    },\n+    [queryClient]\n+  );\n+\n+  const handleToggleStatus = useCallback(\n+    async (id: number) => {\n+      try {\n+        await toggleCategoryStatus(id);\n+        message.success(\"状态更新成功\");\n+        queryClient.invalidateQueries({ queryKey: [\"categories\"] });\n+      } catch (error) {\n+        message.error(\"状态更新失败\");\n+      }\n+    },\n+    [queryClient]\n+  );\n+\n+  const columns: ColumnsType<ICategory> = [\n+    {\n+      title: \"ID\",\n+      dataIndex: \"id\",\n+      key: \"id\",\n+      width: 80,\n+    },\n+    {\n+      title: \"分类名称\",\n+      dataIndex: \"name\",\n+      key: \"name\",\n+    },\n+    {\n+      title: \"状态\",\n+      dataIndex: \"status\",\n+      key: \"status\",\n+      render: (status: number) => (\n+        <Tag color={status === 1 ? \"success\" : \"error\"}>\n+          {status === 1 ? \"启用\" : \"禁用\"}\n+        </Tag>\n+      ),\n+    },\n+    {\n+      title: \"创建时间\",\n+      dataIndex: \"createdAt\",\n+      key: \"createdAt\",\n+      render: (date: string) => formatDateTime(date),\n+    },\n+    {\n+      title: \"更新时间\",\n+      dataIndex: \"updatedAt\",\n+      key: \"updatedAt\",\n+      render: (date: string) => formatDateTime(date),\n+    },\n+    {\n+      title: \"操作\",\n+      key: \"action\",\n+      render: (_, record) => (\n+        <Space size=\"middle\">\n+          <Button\n+            type=\"link\"\n+            onClick={() => navigate(`/category/categories/edit/${record.id}`)}\n+          >\n+            编辑\n+          </Button>\n+          <Button type=\"link\" onClick={() => handleToggleStatus(record.id)}>\n+            {record.status === 1 ? \"禁用\" : \"启用\"}\n+          </Button>\n+          <Button type=\"link\" danger onClick={() => handleDelete(record.id)}>\n+            删除\n+          </Button>\n+        </Space>\n+      ),\n+    },\n+  ];\n+\n   return (\n     <div className={styles.container}>\n       <Card>\n         <Form<ICategoryQueryParams>\n@@ -159,8 +258,27 @@\n           setEditingCategory(null);\n           queryClient.invalidateQueries({ queryKey: [\"categories\"] });\n         }}\n       />\n+\n+      <Card\n+        title=\"分类列表\"\n+        extra={\n+          <Button\n+            type=\"primary\"\n+            onClick={() => navigate(\"/category/categories/create\")}\n+          >\n+            新增分类\n+          </Button>\n+        }\n+      >\n+        <Table\n+          columns={columns}\n+          dataSource={treeData}\n+          rowKey=\"id\"\n+          pagination={false}\n+        />\n+      </Card>\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1746107182804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n } from \"@/api/modules/category\";\n import { useCallback, useMemo } from \"react\";\n import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n \n+import type { ColumnsType } from \"antd/es/table\";\n import type { DataNode } from \"antd/es/tree\";\n import { ExclamationCircleOutlined } from \"@ant-design/icons\";\n import type { ICategoryType } from \"@/types/api/category-type\";\n import { formatDateTime } from \"@/utils/format\";\n@@ -31,8 +32,12 @@\n import { useState } from \"react\";\n \n const { confirm } = Modal;\n \n+interface ICategoryWithChildren extends ICategory {\n+  children?: ICategoryWithChildren[];\n+}\n+\n const Categories = () => {\n   const navigate = useNavigate();\n   const queryClient = useQueryClient();\n   const [form] = Form.useForm<ICategoryQueryParams>();\n@@ -57,32 +62,35 @@\n     queryKey: [\"categories\"],\n     queryFn: () => getCategories({ page: 1, pageSize: 100 }),\n   });\n \n-  const buildTreeData = useCallback((data: ICategory[]): ICategory[] => {\n-    const map = new Map<number, ICategory>();\n-    const result: ICategory[] = [];\n+  const buildTreeData = useCallback(\n+    (data: ICategory[]): ICategoryWithChildren[] => {\n+      const map = new Map<number, ICategoryWithChildren>();\n+      const result: ICategoryWithChildren[] = [];\n \n-    data.forEach((node) => {\n-      map.set(node.id, { ...node, children: [] });\n-    });\n+      data.forEach((node) => {\n+        map.set(node.id, { ...node, children: [] });\n+      });\n \n-    data.forEach((node) => {\n-      const current = map.get(node.id);\n-      if (current) {\n-        if (node.parentId === 0) {\n-          result.push(current);\n-        } else {\n-          const parent = map.get(node.parentId);\n-          if (parent) {\n-            (parent.children as ICategory[]).push(current);\n+      data.forEach((node) => {\n+        const current = map.get(node.id);\n+        if (current) {\n+          if (node.parentId === 0) {\n+            result.push(current);\n+          } else {\n+            const parent = map.get(node.parentId);\n+            if (parent && parent.children) {\n+              parent.children.push(current);\n+            }\n           }\n         }\n-      }\n-    });\n+      });\n \n-    return result;\n-  }, []);\n+      return result;\n+    },\n+    []\n+  );\n \n   console.log(categoryTreeData);\n \n   // 调试输出树数据\n@@ -140,9 +148,9 @@\n     },\n     [queryClient]\n   );\n \n-  const columns: ColumnsType<ICategory> = [\n+  const columns: ColumnsType<ICategoryWithChildren> = [\n     {\n       title: \"ID\",\n       dataIndex: \"id\",\n       key: \"id\",\n@@ -177,9 +185,9 @@\n     },\n     {\n       title: \"操作\",\n       key: \"action\",\n-      render: (_, record) => (\n+      render: (_, record: ICategoryWithChildren) => (\n         <Space size=\"middle\">\n           <Button\n             type=\"link\"\n             onClick={() => navigate(`/category/categories/edit/${record.id}`)}\n"
                }
            ],
            "date": 1746097931733,
            "name": "Commit-0",
            "content": "import {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  Modal,\r\n  Select,\r\n  Space,\r\n  Table,\r\n  Tag,\r\n  message,\r\n} from \"antd\";\r\nimport type { ICategory, ICategoryQueryParams } from \"@/types/api/category\";\r\nimport {\r\n  deleteCategory,\r\n  getCategories,\r\n  toggleCategoryStatus,\r\n} from \"@/api/modules/category\";\r\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n\r\nimport CategoryForm from \"./components/CategoryForm\";\r\nimport { getCategoryTypes } from \"@/api/modules/category-type\";\r\nimport styles from \"./style.module.less\";\r\nimport { useState } from \"react\";\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Categories = () => {\r\n  const queryClient = useQueryClient();\r\n  const [form] = Form.useForm<ICategoryQueryParams>();\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [editingCategory, setEditingCategory] = useState<ICategory | null>(\r\n    null\r\n  );\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [searchValues, setSearchValues] = useState<\r\n    Partial<ICategoryQueryParams>\r\n  >({});\r\n\r\n  // 获取分类列表\r\n  const { data: categoriesData, isLoading } = useQuery({\r\n    queryKey: [\"categories\", currentPage, pageSize, searchValues],\r\n    queryFn: () =>\r\n      getCategories({\r\n        page: currentPage,\r\n        pageSize,\r\n        ...searchValues,\r\n      }),\r\n  });\r\n\r\n  // 获取分类类型列表\r\n  const { data: categoryTypesData } = useQuery({\r\n    queryKey: [\"categoryTypes\"],\r\n    queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\r\n  });\r\n\r\n  // 删除分类\r\n  const deleteMutation = useMutation({\r\n    mutationFn: deleteCategory,\r\n    onSuccess: () => {\r\n      message.success(\"删除成功\");\r\n      queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n    },\r\n  });\r\n\r\n  // 切换分类状态\r\n  const toggleStatusMutation = useMutation({\r\n    mutationFn: toggleCategoryStatus,\r\n    onSuccess: () => {\r\n      message.success(\"状态更新成功\");\r\n      queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n    },\r\n  });\r\n\r\n  // 处理删除分类\r\n  const handleDelete = (id: number) => {\r\n    confirm({\r\n      title: \"确认删除\",\r\n      content: \"确定要删除这个分类吗？此操作不可恢复。\",\r\n      okText: \"确认\",\r\n      cancelText: \"取消\",\r\n      onOk: () => deleteMutation.mutate(id),\r\n    });\r\n  };\r\n\r\n  // 处理切换分类状态\r\n  const handleToggleStatus = (id: number) => {\r\n    toggleStatusMutation.mutate(id);\r\n  };\r\n\r\n  // 表格列配置\r\n  const columns = [\r\n    {\r\n      title: \"分类名称\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"分类编码\",\r\n      dataIndex: \"code\",\r\n      key: \"code\",\r\n    },\r\n    {\r\n      title: \"分类类型\",\r\n      dataIndex: [\"type\", \"name\"],\r\n      key: \"type\",\r\n    },\r\n    {\r\n      title: \"描述\",\r\n      dataIndex: \"description\",\r\n      key: \"description\",\r\n    },\r\n    {\r\n      title: \"排序\",\r\n      dataIndex: \"sort\",\r\n      key: \"sort\",\r\n    },\r\n    {\r\n      title: \"状态\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (status: number) => (\r\n        <Tag color={status === 1 ? \"success\" : \"error\"}>\r\n          {status === 1 ? \"启用\" : \"禁用\"}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: \"创建时间\",\r\n      dataIndex: \"createdAt\",\r\n      key: \"createdAt\",\r\n    },\r\n    {\r\n      title: \"操作\",\r\n      key: \"action\",\r\n      render: (_: unknown, record: ICategory) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              setEditingCategory(record);\r\n              setModalVisible(true);\r\n            }}\r\n          >\r\n            编辑\r\n          </Button>\r\n          <Button type=\"link\" onClick={() => handleToggleStatus(record.id)}>\r\n            {record.status === 1 ? \"禁用\" : \"启用\"}\r\n          </Button>\r\n          <Button type=\"link\" danger onClick={() => handleDelete(record.id)}>\r\n            删除\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // 处理搜索\r\n  const handleSearch = (values: Partial<ICategoryQueryParams>) => {\r\n    setCurrentPage(1);\r\n    setSearchValues(values);\r\n  };\r\n\r\n  // 处理重置\r\n  const handleReset = () => {\r\n    form.resetFields();\r\n    setCurrentPage(1);\r\n    setSearchValues({});\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Card>\r\n        <Form<ICategoryQueryParams>\r\n          form={form}\r\n          layout=\"inline\"\r\n          className={styles.searchForm}\r\n          onFinish={handleSearch}\r\n        >\r\n          <Form.Item name=\"name\" label=\"分类名称\">\r\n            <Input placeholder=\"请输入分类名称\" allowClear />\r\n          </Form.Item>\r\n          <Form.Item name=\"code\" label=\"分类编码\">\r\n            <Input placeholder=\"请输入分类编码\" allowClear />\r\n          </Form.Item>\r\n          <Form.Item name=\"typeId\" label=\"分类类型\">\r\n            <Select\r\n              placeholder=\"请选择分类类型\"\r\n              allowClear\r\n              options={categoryTypesData?.data.list.map((type) => ({\r\n                label: type.name,\r\n                value: type.id,\r\n              }))}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"status\" label=\"状态\">\r\n            <Select\r\n              placeholder=\"请选择状态\"\r\n              allowClear\r\n              options={[\r\n                { label: \"启用\", value: 1 },\r\n                { label: \"禁用\", value: 0 },\r\n              ]}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Space>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                搜索\r\n              </Button>\r\n              <Button onClick={handleReset}>重置</Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Form>\r\n\r\n        <div className={styles.tableHeader}>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              setEditingCategory(null);\r\n              setModalVisible(true);\r\n            }}\r\n          >\r\n            新增分类\r\n          </Button>\r\n        </div>\r\n\r\n        <Table\r\n          columns={columns}\r\n          dataSource={categoriesData?.data.list}\r\n          rowKey=\"id\"\r\n          loading={isLoading}\r\n          pagination={{\r\n            current: currentPage,\r\n            pageSize,\r\n            total: categoriesData?.data.pagination?.total || 0,\r\n            onChange: (page, size) => {\r\n              setCurrentPage(page);\r\n              setPageSize(size);\r\n            },\r\n          }}\r\n        />\r\n      </Card>\r\n\r\n      <CategoryForm\r\n        visible={modalVisible}\r\n        editingCategory={editingCategory}\r\n        onCancel={() => {\r\n          setModalVisible(false);\r\n          setEditingCategory(null);\r\n        }}\r\n        onSuccess={() => {\r\n          setModalVisible(false);\r\n          setEditingCategory(null);\r\n          queryClient.invalidateQueries({ queryKey: [\"categories\"] });\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n"
        }
    ]
}