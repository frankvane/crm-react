{
    "sourceFile": "src/pages/category/categories/components/CategoryForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746091881440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746097955558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Form, Input, InputNumber, Modal, Select, Switch } from \"antd\";\r\n+import { Form, Input, InputNumber, Modal, Select, message } from \"antd\";\r\n import type {\r\n   ICategory,\r\n   ICategoryTreeNode,\r\n   ICreateCategoryParams,\r\n@@ -13,23 +13,22 @@\n import { useEffect, useState } from \"react\";\r\n import { useMutation, useQuery } from \"@tanstack/react-query\";\r\n \r\n import { getCategoryTypes } from \"@/api/modules/category-type\";\r\n-import { message } from \"antd\";\r\n \r\n interface ICategoryFormProps {\r\n   visible: boolean;\r\n   editingCategory: ICategory | null;\r\n   onCancel: () => void;\r\n   onSuccess: () => void;\r\n }\r\n \r\n-const CategoryForm = ({\r\n+const CategoryForm: React.FC<ICategoryFormProps> = ({\r\n   visible,\r\n   editingCategory,\r\n   onCancel,\r\n   onSuccess,\r\n-}: ICategoryFormProps) => {\r\n+}) => {\r\n   const [form] = Form.useForm<ICreateCategoryParams>();\r\n   const [selectedTypeId, setSelectedTypeId] = useState<number | null>(null);\r\n \r\n   // 获取分类类型列表\r\n@@ -55,17 +54,17 @@\n   });\r\n \r\n   // 更新分类\r\n   const updateMutation = useMutation({\r\n-    mutationFn: ({ id, ...data }: IUpdateCategoryParams & { id: number }) =>\r\n+    mutationFn: ({ id, data }: { id: number; data: IUpdateCategoryParams }) =>\r\n       updateCategory(id, data),\r\n     onSuccess: () => {\r\n       message.success(\"更新成功\");\r\n       onSuccess();\r\n     },\r\n   });\r\n \r\n-  // 监听表单显示状态\r\n+  // 监听表单可见性变化\r\n   useEffect(() => {\r\n     if (visible) {\r\n       if (editingCategory) {\r\n         form.setFieldsValue(editingCategory);\r\n@@ -83,15 +82,16 @@\n       const values = await form.validateFields();\r\n       if (editingCategory) {\r\n         updateMutation.mutate({\r\n           id: editingCategory.id,\r\n-          ...values,\r\n+          data: values,\r\n         });\r\n       } else {\r\n         createMutation.mutate(values);\r\n       }\r\n     } catch (error) {\r\n-      console.error(\"表单验证失败:\", error);\r\n+      // 表单验证失败\r\n+      console.error(\"Validate Failed:\", error);\r\n     }\r\n   };\r\n \r\n   // 递归构建树形选项\r\n@@ -116,9 +116,13 @@\n       onCancel={onCancel}\r\n       onOk={handleSubmit}\r\n       confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n     >\r\n-      <Form form={form} layout=\"vertical\" initialValues={{ status: true }}>\r\n+      <Form<ICreateCategoryParams>\r\n+        form={form}\r\n+        layout=\"vertical\"\r\n+        initialValues={{ status: 1 }}\r\n+      >\r\n         <Form.Item\r\n           name=\"name\"\r\n           label=\"分类名称\"\r\n           rules={[{ required: true, message: \"请输入分类名称\" }]}\r\n@@ -165,10 +169,20 @@\n         <Form.Item name=\"sort\" label=\"排序\">\r\n           <InputNumber placeholder=\"请输入排序\" style={{ width: \"100%\" }} />\r\n         </Form.Item>\r\n \r\n-        <Form.Item name=\"status\" label=\"状态\" valuePropName=\"checked\">\r\n-          <Switch checkedChildren=\"启用\" unCheckedChildren=\"禁用\" />\r\n+        <Form.Item\r\n+          name=\"status\"\r\n+          label=\"状态\"\r\n+          rules={[{ required: true, message: \"请选择状态\" }]}\r\n+        >\r\n+          <Select\r\n+            placeholder=\"请选择状态\"\r\n+            options={[\r\n+              { label: \"启用\", value: 1 },\r\n+              { label: \"禁用\", value: 0 },\r\n+            ]}\r\n+          />\r\n         </Form.Item>\r\n       </Form>\r\n     </Modal>\r\n   );\r\n"
                },
                {
                    "date": 1746099100958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,12 @@\n   createCategory,\r\n   getCategoryTree,\r\n   updateCategory,\r\n } from \"@/api/modules/category\";\r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useMemo, useState } from \"react\";\r\n import { useMutation, useQuery } from \"@tanstack/react-query\";\r\n \r\n+import { getCategories } from \"@/api/modules/category\";\r\n import { getCategoryTypes } from \"@/api/modules/category-type\";\r\n \r\n interface ICategoryFormProps {\r\n   visible: boolean;\r\n@@ -32,12 +33,35 @@\n   const [selectedTypeId, setSelectedTypeId] = useState<number | null>(null);\r\n \r\n   // 获取分类类型列表\r\n   const { data: categoryTypesData } = useQuery({\r\n-    queryKey: [\"categoryTypes\"],\r\n+    queryKey: [\"categoryTypes\", { page: 1, pageSize: 100 }],\r\n     queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\r\n   });\r\n \r\n+  const { data: categoriesData } = useQuery({\r\n+    queryKey: [\"categories\", { page: 1, pageSize: 100 }],\r\n+    queryFn: () => getCategories({ page: 1, pageSize: 100 }),\r\n+  });\r\n+\r\n+  const categoryTypeOptions = useMemo(() => {\r\n+    return (\r\n+      categoryTypesData?.list?.map((type) => ({\r\n+        label: type.name,\r\n+        value: type.id,\r\n+      })) || []\r\n+    );\r\n+  }, [categoryTypesData]);\r\n+\r\n+  const parentCategoryOptions = useMemo(() => {\r\n+    return (\r\n+      categoriesData?.list?.map((category) => ({\r\n+        label: category.name,\r\n+        value: category.id,\r\n+      })) || []\r\n+    );\r\n+  }, [categoriesData]);\r\n+\r\n   // 获取分类树\r\n   const { data: categoryTreeData } = useQuery({\r\n     queryKey: [\"categoryTree\", selectedTypeId],\r\n     queryFn: () => getCategoryTree(selectedTypeId!),\r\n@@ -144,12 +168,9 @@\n           rules={[{ required: true, message: \"请选择分类类型\" }]}\r\n         >\r\n           <Select\r\n             placeholder=\"请选择分类类型\"\r\n-            options={categoryTypesData?.data.list.map((type) => ({\r\n-              label: type.name,\r\n-              value: type.id,\r\n-            }))}\r\n+            options={categoryTypeOptions}\r\n             onChange={(value) => setSelectedTypeId(value)}\r\n           />\r\n         </Form.Item>\r\n \r\n"
                },
                {
                    "date": 1746107606276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,135 @@\n-import { Form, Input, InputNumber, Modal, Select, message } from \"antd\";\n-import type {\n-  ICategory,\n-  ICategoryTreeNode,\n-  ICreateCategoryParams,\n-  IUpdateCategoryParams,\n-} from \"@/types/api/category\";\n-import {\n-  createCategory,\n-  getCategoryTree,\n-  updateCategory,\n-} from \"@/api/modules/category\";\n-import { useEffect, useMemo } from \"react\";\n-import { useMutation, useQuery } from \"@tanstack/react-query\";\n+import { Button, Card, Form, Input, Select, message } from 'antd';\n+import { createCategory, getCategory, updateCategory } from '@/api/modules/category';\n+import { useNavigate, useParams } from 'react-router-dom';\n+import { useQuery, useQueryClient } from '@tanstack/react-query';\n \n-import { getCategoryTypes } from \"@/api/modules/category-type\";\n+import type { ICreateCategoryParams } from '@/types/api/category';\n+import { getCategoryTypes } from '@/api/modules/category-type';\n \n-interface ICategoryFormProps {\n-  visible: boolean;\n-  editingCategory: ICategory | null;\n-  onCancel: () => void;\n-  onSuccess: () => void;\n-}\n-\n-const CategoryForm: React.FC<ICategoryFormProps> = ({\n-  visible,\n-  editingCategory,\n-  onCancel,\n-  onSuccess,\n-}) => {\n+const CategoryForm = () => {\n+  const navigate = useNavigate();\n+  const { id } = useParams<{ id: string }>();\n+  const queryClient = useQueryClient();\n   const [form] = Form.useForm<ICreateCategoryParams>();\n \n-  // 获取分类类型列表\n+  const { data: categoryData } = useQuery({\n+    queryKey: ['category', id],\n+    queryFn: () => getCategory(Number(id)),\n+    enabled: !!id,\n+  });\n+\n   const { data: categoryTypesData } = useQuery({\n-    queryKey: [\"categoryTypes\", { page: 1, pageSize: 100 }],\n+    queryKey: ['categoryTypes'],\n     queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\n   });\n \n-  const categoryTypeOptions = useMemo(() => {\n-    return (\n-      categoryTypesData?.list?.map((type) => ({\n-        label: type.name,\n-        value: type.id,\n-      })) || []\n-    );\n-  }, [categoryTypesData]);\n-\n-  // 获取所有分类树（不依赖 typeId）\n-  const { data: categoryTreeData } = useQuery({\n-    queryKey: [\"categoryTree\"],\n-    queryFn: () => getCategoryTree(0), // 0 或不传，后端返回所有分类树\n-  });\n-\n-  // 创建分类\n-  const createMutation = useMutation({\n-    mutationFn: (data: ICreateCategoryParams) => createCategory(data),\n-    onSuccess: () => {\n-      message.success(\"创建成功\");\n-      onSuccess();\n-    },\n-  });\n-\n-  // 更新分类\n-  const updateMutation = useMutation({\n-    mutationFn: ({ id, data }: { id: number; data: IUpdateCategoryParams }) =>\n-      updateCategory(id, data),\n-    onSuccess: () => {\n-      message.success(\"更新成功\");\n-      onSuccess();\n-    },\n-  });\n-\n-  // 监听表单可见性变化\n-  useEffect(() => {\n-    if (visible) {\n-      if (editingCategory) {\n-        form.setFieldsValue(editingCategory);\n-      } else {\n-        form.resetFields();\n-      }\n-    }\n-  }, [visible, editingCategory, form]);\n-\n-  // 处理表单提交\n-  const handleSubmit = async () => {\n+  const handleSubmit = async (values: ICreateCategoryParams) => {\n     try {\n-      const values = await form.validateFields();\n-      if (editingCategory) {\n-        updateMutation.mutate({\n-          id: editingCategory.id,\n-          data: values,\n-        });\n+      if (id) {\n+        await updateCategory(Number(id), values);\n+        message.success('更新成功');\n       } else {\n-        createMutation.mutate(values);\n+        await createCategory(values);\n+        message.success('创建成功');\n       }\n-    } catch (error) {\n-      // 表单验证失败\n-      console.error(\"Validate Failed:\", error);\n+      queryClient.invalidateQueries({ queryKey: ['categoryTree'] });\n+      navigate('/category/categories');\n+    } catch (err) {\n+      message.error(id ? '更新失败' : '创建失败');\n+      console.error(err);\n     }\n   };\n \n-  // 递归构建树形选项\n-  interface TreeOption {\n-    label: string;\n-    value: number;\n-    children?: TreeOption[];\n-  }\n-\n-  const buildTreeOptions = (nodes: ICategoryTreeNode[] = []): TreeOption[] => {\n-    return nodes.map((node) => ({\n-      label: node.name,\n-      value: node.id,\n-      children: node.children ? buildTreeOptions(node.children) : undefined,\n-    }));\n-  };\n-\n   return (\n-    <Modal\n-      title={editingCategory ? \"编辑分类\" : \"新增分类\"}\n-      open={visible}\n-      onCancel={onCancel}\n-      onOk={handleSubmit}\n-      confirmLoading={createMutation.isPending || updateMutation.isPending}\n-    >\n-      <Form<ICreateCategoryParams>\n+    <Card title={id ? '编辑分类' : '新增分类'}>\n+      <Form\n         form={form}\n         layout=\"vertical\"\n-        initialValues={{ status: 1 }}\n+        onFinish={handleSubmit}\n+        initialValues={\n+          id\n+            ? {\n+                name: categoryData?.name,\n+                code: categoryData?.code,\n+                description: categoryData?.description,\n+                status: categoryData?.status,\n+                parentId: categoryData?.parentId,\n+                typeId: categoryData?.typeId,\n+              }\n+            : {\n+                status: 1,\n+                parentId: 0,\n+              }\n+        }\n       >\n         <Form.Item\n+          label=\"分类名称\"\n           name=\"name\"\n-          label=\"分类名称\"\n-          rules={[{ required: true, message: \"请输入分类名称\" }]}\n+          rules={[{ required: true, message: '请输入分类名称' }]}\n         >\n           <Input placeholder=\"请输入分类名称\" />\n         </Form.Item>\n \n         <Form.Item\n+          label=\"分类编码\"\n           name=\"code\"\n-          label=\"分类编码\"\n-          rules={[{ required: true, message: \"请输入分类编码\" }]}\n+          rules={[{ required: true, message: '请输入分类编码' }]}\n         >\n           <Input placeholder=\"请输入分类编码\" />\n         </Form.Item>\n \n         <Form.Item\n+          label=\"分类类型\"\n           name=\"typeId\"\n-          label=\"分类类型\"\n-          rules={[{ required: true, message: \"请选择分类类型\" }]}\n+          rules={[{ required: true, message: '请选择分类类型' }]}\n         >\n-          <Select placeholder=\"请选择分类类型\" options={categoryTypeOptions} />\n+          <Select\n+            options={categoryTypesData?.items.map((type) => ({\n+              label: type.name,\n+              value: type.id,\n+            }))}\n+            placeholder=\"请选择分类类型\"\n+          />\n         </Form.Item>\n \n-        <Form.Item name=\"parentId\" label=\"父级分类\">\n+        <Form.Item label=\"父级分类\" name=\"parentId\">\n           <Select\n+            options={[\n+              { label: '无', value: 0 },\n+              ...(categoryData?.parentOptions || []).map((category) => ({\n+                label: category.name,\n+                value: category.id,\n+              })),\n+            ]}\n             placeholder=\"请选择父级分类\"\n-            allowClear\n-            options={buildTreeOptions(categoryTreeData?.data)}\n           />\n         </Form.Item>\n \n-        <Form.Item name=\"description\" label=\"描述\">\n+        <Form.Item label=\"描述\" name=\"description\">\n           <Input.TextArea placeholder=\"请输入描述\" />\n         </Form.Item>\n \n-        <Form.Item name=\"sort\" label=\"排序\">\n-          <InputNumber placeholder=\"请输入排序\" style={{ width: \"100%\" }} />\n+        <Form.Item\n+          label=\"状态\"\n+          name=\"status\"\n+          rules={[{ required: true, message: '请选择状态' }]}\n+        >\n+          <Select\n+            options={[\n+              { label: '启用', value: 1 },\n+              { label: '禁用', value: 0 },\n+            ]}\n+          />\n         </Form.Item>\n+\n+        <Form.Item>\n+          <Button type=\"primary\" htmlType=\"submit\">\n+            {id ? '更新' : '创建'}\n+          </Button>\n+        </Form.Item>\n       </Form>\n-    </Modal>\n+    </Card>\n   );\n };\n \n export default CategoryForm;\n"
                },
                {
                    "date": 1746107647460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import { Button, Card, Form, Input, Select, message } from \"antd\";\n+import type { ICategory, ICreateCategoryParams } from \"@/types/api/category\";\n import {\n   createCategory,\n   getCategory,\n   updateCategory,\n } from \"@/api/modules/category\";\n import { useNavigate, useParams } from \"react-router-dom\";\n import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n \n-import type { ICreateCategoryParams } from \"@/types/api/category\";\n+import type { ICategoryType } from \"@/types/api/category-type\";\n import { getCategoryTypes } from \"@/api/modules/category-type\";\n \n const CategoryForm = () => {\n   const navigate = useNavigate();\n@@ -50,16 +51,16 @@\n         form={form}\n         layout=\"vertical\"\n         onFinish={handleSubmit}\n         initialValues={\n-          id\n+          id && categoryData\n             ? {\n-                name: categoryData?.name,\n-                code: categoryData?.code,\n-                description: categoryData?.description,\n-                status: categoryData?.status,\n-                parentId: categoryData?.parentId,\n-                typeId: categoryData?.typeId,\n+                name: categoryData.name,\n+                code: categoryData.code,\n+                description: categoryData.description,\n+                status: categoryData.status,\n+                parentId: categoryData.parentId,\n+                typeId: categoryData.typeId,\n               }\n             : {\n                 status: 1,\n                 parentId: 0,\n@@ -87,9 +88,9 @@\n           name=\"typeId\"\n           rules={[{ required: true, message: \"请选择分类类型\" }]}\n         >\n           <Select\n-            options={categoryTypesData?.items.map((type) => ({\n+            options={categoryTypesData?.items?.map((type: ICategoryType) => ({\n               label: type.name,\n               value: type.id,\n             }))}\n             placeholder=\"请选择分类类型\"\n@@ -99,12 +100,14 @@\n         <Form.Item label=\"父级分类\" name=\"parentId\">\n           <Select\n             options={[\n               { label: \"无\", value: 0 },\n-              ...(categoryData?.parentOptions || []).map((category) => ({\n-                label: category.name,\n-                value: category.id,\n-              })),\n+              ...(categoryData?.parentOptions || []).map(\n+                (category: ICategory) => ({\n+                  label: category.name,\n+                  value: category.id,\n+                })\n+              ),\n             ]}\n             placeholder=\"请选择父级分类\"\n           />\n         </Form.Item>\n"
                }
            ],
            "date": 1746091881440,
            "name": "Commit-0",
            "content": "import { Form, Input, InputNumber, Modal, Select, Switch } from \"antd\";\r\nimport type {\r\n  ICategory,\r\n  ICategoryTreeNode,\r\n  ICreateCategoryParams,\r\n  IUpdateCategoryParams,\r\n} from \"@/types/api/category\";\r\nimport {\r\n  createCategory,\r\n  getCategoryTree,\r\n  updateCategory,\r\n} from \"@/api/modules/category\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\r\n\r\nimport { getCategoryTypes } from \"@/api/modules/category-type\";\r\nimport { message } from \"antd\";\r\n\r\ninterface ICategoryFormProps {\r\n  visible: boolean;\r\n  editingCategory: ICategory | null;\r\n  onCancel: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\nconst CategoryForm = ({\r\n  visible,\r\n  editingCategory,\r\n  onCancel,\r\n  onSuccess,\r\n}: ICategoryFormProps) => {\r\n  const [form] = Form.useForm<ICreateCategoryParams>();\r\n  const [selectedTypeId, setSelectedTypeId] = useState<number | null>(null);\r\n\r\n  // 获取分类类型列表\r\n  const { data: categoryTypesData } = useQuery({\r\n    queryKey: [\"categoryTypes\"],\r\n    queryFn: () => getCategoryTypes({ page: 1, pageSize: 100 }),\r\n  });\r\n\r\n  // 获取分类树\r\n  const { data: categoryTreeData } = useQuery({\r\n    queryKey: [\"categoryTree\", selectedTypeId],\r\n    queryFn: () => getCategoryTree(selectedTypeId!),\r\n    enabled: !!selectedTypeId,\r\n  });\r\n\r\n  // 创建分类\r\n  const createMutation = useMutation({\r\n    mutationFn: (data: ICreateCategoryParams) => createCategory(data),\r\n    onSuccess: () => {\r\n      message.success(\"创建成功\");\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 更新分类\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ id, ...data }: IUpdateCategoryParams & { id: number }) =>\r\n      updateCategory(id, data),\r\n    onSuccess: () => {\r\n      message.success(\"更新成功\");\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 监听表单显示状态\r\n  useEffect(() => {\r\n    if (visible) {\r\n      if (editingCategory) {\r\n        form.setFieldsValue(editingCategory);\r\n        setSelectedTypeId(editingCategory.typeId);\r\n      } else {\r\n        form.resetFields();\r\n        setSelectedTypeId(null);\r\n      }\r\n    }\r\n  }, [visible, editingCategory, form]);\r\n\r\n  // 处理表单提交\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      if (editingCategory) {\r\n        updateMutation.mutate({\r\n          id: editingCategory.id,\r\n          ...values,\r\n        });\r\n      } else {\r\n        createMutation.mutate(values);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"表单验证失败:\", error);\r\n    }\r\n  };\r\n\r\n  // 递归构建树形选项\r\n  interface TreeOption {\r\n    label: string;\r\n    value: number;\r\n    children?: TreeOption[];\r\n  }\r\n\r\n  const buildTreeOptions = (nodes: ICategoryTreeNode[] = []): TreeOption[] => {\r\n    return nodes.map((node) => ({\r\n      label: node.name,\r\n      value: node.id,\r\n      children: node.children ? buildTreeOptions(node.children) : undefined,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={editingCategory ? \"编辑分类\" : \"新增分类\"}\r\n      open={visible}\r\n      onCancel={onCancel}\r\n      onOk={handleSubmit}\r\n      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n    >\r\n      <Form form={form} layout=\"vertical\" initialValues={{ status: true }}>\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"分类名称\"\r\n          rules={[{ required: true, message: \"请输入分类名称\" }]}\r\n        >\r\n          <Input placeholder=\"请输入分类名称\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"code\"\r\n          label=\"分类编码\"\r\n          rules={[{ required: true, message: \"请输入分类编码\" }]}\r\n        >\r\n          <Input placeholder=\"请输入分类编码\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"typeId\"\r\n          label=\"分类类型\"\r\n          rules={[{ required: true, message: \"请选择分类类型\" }]}\r\n        >\r\n          <Select\r\n            placeholder=\"请选择分类类型\"\r\n            options={categoryTypesData?.data.list.map((type) => ({\r\n              label: type.name,\r\n              value: type.id,\r\n            }))}\r\n            onChange={(value) => setSelectedTypeId(value)}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"parentId\" label=\"父级分类\">\r\n          <Select\r\n            placeholder=\"请选择父级分类\"\r\n            allowClear\r\n            options={buildTreeOptions(categoryTreeData?.data)}\r\n            disabled={!selectedTypeId}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"description\" label=\"描述\">\r\n          <Input.TextArea placeholder=\"请输入描述\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"sort\" label=\"排序\">\r\n          <InputNumber placeholder=\"请输入排序\" style={{ width: \"100%\" }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"status\" label=\"状态\" valuePropName=\"checked\">\r\n          <Switch checkedChildren=\"启用\" unCheckedChildren=\"禁用\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CategoryForm;\r\n"
        }
    ]
}