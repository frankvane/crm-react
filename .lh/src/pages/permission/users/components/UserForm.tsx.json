{
    "sourceFile": "src/pages/permission/users/components/UserForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746087312253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746087542632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,10 @@\n import { Form, Input, Modal, Select, message } from \"antd\";\r\n-import type {\r\n-  ICreateUserParams,\r\n-  IUpdateUserParams,\r\n-  IUser,\r\n-} from \"@/types/api/user\";\r\n+import { createUser, updateUser } from \"@/api/modules/user\";\r\n import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n \r\n+import type { IUser } from \"@/types/api/user\";\r\n import { useEffect } from \"react\";\r\n-import { userApi } from \"@/api/modules/user\";\r\n \r\n interface IUserFormProps {\r\n   visible: boolean;\r\n   editingUser: IUser | null;\r\n@@ -24,116 +20,137 @@\n }) => {\r\n   const [form] = Form.useForm();\r\n   const queryClient = useQueryClient();\r\n \r\n+  // 获取角色列表\r\n+  const { data: rolesData } = useQuery({\r\n+    queryKey: [\"roles\"],\r\n+    queryFn: () => {\r\n+      // TODO: 实现获取角色列表的 API\r\n+      return Promise.resolve({ data: { list: [] } });\r\n+    },\r\n+  });\r\n+\r\n   // 创建用户\r\n-  const createUserMutation = useMutation({\r\n-    mutationFn: userApi.createUser,\r\n+  const createMutation = useMutation({\r\n+    mutationFn: createUser,\r\n     onSuccess: () => {\r\n       message.success(\"创建成功\");\r\n       onSuccess();\r\n     },\r\n   });\r\n \r\n   // 更新用户\r\n-  const updateUserMutation = useMutation({\r\n-    mutationFn: userApi.updateUser,\r\n+  const updateMutation = useMutation({\r\n+    mutationFn: ({ id, data }: { id: number; data: Omit<IUser, \"id\"> }) =>\r\n+      updateUser(id, data),\r\n     onSuccess: () => {\r\n       message.success(\"更新成功\");\r\n       onSuccess();\r\n     },\r\n   });\r\n \r\n-  // 获取角色列表\r\n-  const { data: rolesData } = useQuery({\r\n-    queryKey: [\"roles\"],\r\n-    queryFn: () => {\r\n-      // 这里需要实现角色列表接口\r\n-      return Promise.resolve({ data: { list: [] } });\r\n-    },\r\n-  });\r\n-\r\n+  // 监听表单可见性变化\r\n   useEffect(() => {\r\n-    if (visible && editingUser) {\r\n-      form.setFieldsValue({\r\n-        ...editingUser,\r\n-        password: undefined,\r\n-      });\r\n-    } else {\r\n-      form.resetFields();\r\n+    if (visible) {\r\n+      if (editingUser) {\r\n+        form.setFieldsValue(editingUser);\r\n+      } else {\r\n+        form.resetFields();\r\n+      }\r\n     }\r\n   }, [visible, editingUser, form]);\r\n \r\n+  // 处理表单提交\r\n   const handleSubmit = async () => {\r\n     try {\r\n       const values = await form.validateFields();\r\n       if (editingUser) {\r\n-        await updateUserMutation.mutateAsync({\r\n-          ...values,\r\n+        updateMutation.mutate({\r\n           id: editingUser.id,\r\n+          data: values,\r\n         });\r\n       } else {\r\n-        await createUserMutation.mutateAsync(values);\r\n+        createMutation.mutate(values);\r\n       }\r\n     } catch (error) {\r\n-      console.error(\"Submit failed:\", error);\r\n+      // 表单验证失败\r\n+      console.error(\"Validate Failed:\", error);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <Modal\r\n-      title={editingUser ? \"编辑用户\" : \"新建用户\"}\r\n+      title={editingUser ? \"编辑用户\" : \"新增用户\"}\r\n       open={visible}\r\n+      onOk={handleSubmit}\r\n       onCancel={onCancel}\r\n-      onOk={handleSubmit}\r\n-      confirmLoading={\r\n-        createUserMutation.isPending || updateUserMutation.isPending\r\n-      }\r\n+      confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n     >\r\n-      <Form form={form} layout=\"vertical\" initialValues={{ status: \"active\" }}>\r\n+      <Form\r\n+        form={form}\r\n+        layout=\"vertical\"\r\n+        initialValues={{ status: true }}\r\n+      >\r\n         <Form.Item\r\n           name=\"username\"\r\n           label=\"用户名\"\r\n           rules={[{ required: true, message: \"请输入用户名\" }]}\r\n         >\r\n-          <Input />\r\n+          <Input placeholder=\"请输入用户名\" />\r\n         </Form.Item>\r\n+\r\n         <Form.Item\r\n           name=\"email\"\r\n           label=\"邮箱\"\r\n           rules={[\r\n             { required: true, message: \"请输入邮箱\" },\r\n             { type: \"email\", message: \"请输入有效的邮箱地址\" },\r\n           ]}\r\n         >\r\n-          <Input />\r\n+          <Input placeholder=\"请输入邮箱\" />\r\n         </Form.Item>\r\n+\r\n+        {!editingUser && (\r\n+          <Form.Item\r\n+            name=\"password\"\r\n+            label=\"密码\"\r\n+            rules={[\r\n+              { required: true, message: \"请输入密码\" },\r\n+              { min: 6, message: \"密码长度不能小于 6 位\" },\r\n+            ]}\r\n+          >\r\n+            <Input.Password placeholder=\"请输入密码\" />\r\n+          </Form.Item>\r\n+        )}\r\n+\r\n         <Form.Item\r\n-          name=\"password\"\r\n-          label=\"密码\"\r\n-          rules={[\r\n-            {\r\n-              required: !editingUser,\r\n-              message: \"请输入密码\",\r\n-            },\r\n-          ]}\r\n-        >\r\n-          <Input.Password />\r\n-        </Form.Item>\r\n-        <Form.Item\r\n-          name=\"roleIds\"\r\n+          name=\"roleId\"\r\n           label=\"角色\"\r\n           rules={[{ required: true, message: \"请选择角色\" }]}\r\n         >\r\n           <Select\r\n-            mode=\"multiple\"\r\n             placeholder=\"请选择角色\"\r\n             options={rolesData?.data.list.map((role: any) => ({\r\n               label: role.name,\r\n               value: role.id,\r\n             }))}\r\n           />\r\n         </Form.Item>\r\n+\r\n+        <Form.Item\r\n+          name=\"status\"\r\n+          label=\"状态\"\r\n+          rules={[{ required: true, message: \"请选择状态\" }]}\r\n+        >\r\n+          <Select\r\n+            placeholder=\"请选择状态\"\r\n+            options={[\r\n+              { label: \"启用\", value: true },\r\n+              { label: \"禁用\", value: false },\r\n+            ]}\r\n+          />\r\n+        </Form.Item>\r\n       </Form>\r\n     </Modal>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1746087572704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,16 @@\n import { Form, Input, Modal, Select, message } from \"antd\";\r\n import { createUser, updateUser } from \"@/api/modules/user\";\r\n-import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n+import { useMutation, useQuery } from \"@tanstack/react-query\";\r\n \r\n import type { IUser } from \"@/types/api/user\";\r\n import { useEffect } from \"react\";\r\n \r\n+interface IRole {\r\n+  id: number;\r\n+  name: string;\r\n+}\r\n+\r\n interface IUserFormProps {\r\n   visible: boolean;\r\n   editingUser: IUser | null;\r\n   onCancel: () => void;\r\n@@ -18,16 +23,15 @@\n   onCancel,\r\n   onSuccess,\r\n }) => {\r\n   const [form] = Form.useForm();\r\n-  const queryClient = useQueryClient();\r\n \r\n   // 获取角色列表\r\n   const { data: rolesData } = useQuery({\r\n     queryKey: [\"roles\"],\r\n     queryFn: () => {\r\n       // TODO: 实现获取角色列表的 API\r\n-      return Promise.resolve({ data: { list: [] } });\r\n+      return Promise.resolve({ data: { list: [] as IRole[] } });\r\n     },\r\n   });\r\n \r\n   // 创建用户\r\n@@ -85,9 +89,13 @@\n       onOk={handleSubmit}\r\n       onCancel={onCancel}\r\n       confirmLoading={createMutation.isPending || updateMutation.isPending}\r\n     >\r\n-      <Form form={form} layout=\"vertical\" initialValues={{ status: true }}>\r\n+      <Form\r\n+        form={form}\r\n+        layout=\"vertical\"\r\n+        initialValues={{ status: true }}\r\n+      >\r\n         <Form.Item\r\n           name=\"username\"\r\n           label=\"用户名\"\r\n           rules={[{ required: true, message: \"请输入用户名\" }]}\r\n@@ -125,9 +133,9 @@\n           rules={[{ required: true, message: \"请选择角色\" }]}\r\n         >\r\n           <Select\r\n             placeholder=\"请选择角色\"\r\n-            options={rolesData?.data.list.map((role: any) => ({\r\n+            options={rolesData?.data.list.map((role) => ({\r\n               label: role.name,\r\n               value: role.id,\r\n             }))}\r\n           />\r\n"
                }
            ],
            "date": 1746087312253,
            "name": "Commit-0",
            "content": "import { Form, Input, Modal, Select, message } from 'antd';\r\nimport type { ICreateUserParams, IUpdateUserParams, IUser } from '@/types/api/user';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { useEffect } from 'react';\r\nimport { userApi } from '@/api/modules/user';\r\n\r\ninterface IUserFormProps {\r\n  visible: boolean;\r\n  editingUser: IUser | null;\r\n  onCancel: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\nconst UserForm: React.FC<IUserFormProps> = ({\r\n  visible,\r\n  editingUser,\r\n  onCancel,\r\n  onSuccess,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const queryClient = useQueryClient();\r\n\r\n  // 创建用户\r\n  const createUserMutation = useMutation({\r\n    mutationFn: userApi.createUser,\r\n    onSuccess: () => {\r\n      message.success('创建成功');\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 更新用户\r\n  const updateUserMutation = useMutation({\r\n    mutationFn: userApi.updateUser,\r\n    onSuccess: () => {\r\n      message.success('更新成功');\r\n      onSuccess();\r\n    },\r\n  });\r\n\r\n  // 获取角色列表\r\n  const { data: rolesData } = useQuery({\r\n    queryKey: ['roles'],\r\n    queryFn: () => {\r\n      // 这里需要实现角色列表接口\r\n      return Promise.resolve({ data: { list: [] } });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (visible && editingUser) {\r\n      form.setFieldsValue({\r\n        ...editingUser,\r\n        password: undefined,\r\n      });\r\n    } else {\r\n      form.resetFields();\r\n    }\r\n  }, [visible, editingUser, form]);\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      if (editingUser) {\r\n        await updateUserMutation.mutateAsync({\r\n          ...values,\r\n          id: editingUser.id,\r\n        });\r\n      } else {\r\n        await createUserMutation.mutateAsync(values);\r\n      }\r\n    } catch (error) {\r\n      console.error('Submit failed:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={editingUser ? '编辑用户' : '新建用户'}\r\n      open={visible}\r\n      onCancel={onCancel}\r\n      onOk={handleSubmit}\r\n      confirmLoading={createUserMutation.isPending || updateUserMutation.isPending}\r\n    >\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={{ status: 'active' }}\r\n      >\r\n        <Form.Item\r\n          name=\"username\"\r\n          label=\"用户名\"\r\n          rules={[{ required: true, message: '请输入用户名' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"邮箱\"\r\n          rules={[\r\n            { required: true, message: '请输入邮箱' },\r\n            { type: 'email', message: '请输入有效的邮箱地址' },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          label=\"密码\"\r\n          rules={[\r\n            {\r\n              required: !editingUser,\r\n              message: '请输入密码',\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"roleIds\"\r\n          label=\"角色\"\r\n          rules={[{ required: true, message: '请选择角色' }]}\r\n        >\r\n          <Select\r\n            mode=\"multiple\"\r\n            placeholder=\"请选择角色\"\r\n            options={rolesData?.data.list.map((role: any) => ({\r\n              label: role.name,\r\n              value: role.id,\r\n            }))}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UserForm; "
        }
    ]
}