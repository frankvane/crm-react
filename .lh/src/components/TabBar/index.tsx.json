{
    "sourceFile": "src/components/TabBar/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1746088331859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746088728221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Tabs } from \"antd\";\r\n import styles from \"./style.module.less\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-import { useTabStore } from \"@/stores/tab\";\r\n+import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n const TabBar = () => {\r\n   const navigate = useNavigate();\r\n   const { tabs, activeTab, addTab, removeTab, setActiveTab } = useTabStore();\r\n"
                },
                {
                    "date": 1746088927341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,5 +40,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default TabBar; \n\\ No newline at end of file\n+export default TabBar;\r\n"
                },
                {
                    "date": 1746090227388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,16 @@\n-import { Tabs } from \"antd\";\r\n+import {\r\n+  CloseOutlined,\r\n+  LeftOutlined,\r\n+  ReloadOutlined,\r\n+  RightOutlined,\r\n+  VerticalAlignMiddleOutlined,\r\n+} from \"@ant-design/icons\";\r\n+import { Dropdown, Tabs, Tooltip } from \"antd\";\r\n+\r\n+import type { TabsProps } from \"antd\";\r\n import styles from \"./style.module.less\";\r\n+import { useMemo } from \"react\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n const TabBar = () => {\r\n@@ -22,21 +32,118 @@\n       removeTab(targetKey);\r\n     }\r\n   };\r\n \r\n+  // 刷新当前页面\r\n+  const handleRefresh = () => {\r\n+    window.location.reload();\r\n+  };\r\n+\r\n+  // 关闭其他标签页\r\n+  const closeOtherTabs = () => {\r\n+    const currentTab = tabs.find((tab) => tab.key === activeTab);\r\n+    if (currentTab) {\r\n+      useTabStore.setState({ tabs: [currentTab] });\r\n+    }\r\n+  };\r\n+\r\n+  // 关闭所有标签页\r\n+  const closeAllTabs = () => {\r\n+    useTabStore.setState({ tabs: [] });\r\n+    navigate(\"/app/dashboard\");\r\n+  };\r\n+\r\n+  // 关闭左侧标签页\r\n+  const closeLeftTabs = () => {\r\n+    const currentIndex = tabs.findIndex((tab) => tab.key === activeTab);\r\n+    if (currentIndex > -1) {\r\n+      useTabStore.setState({\r\n+        tabs: tabs.slice(currentIndex),\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // 关闭右侧标签页\r\n+  const closeRightTabs = () => {\r\n+    const currentIndex = tabs.findIndex((tab) => tab.key === activeTab);\r\n+    if (currentIndex > -1) {\r\n+      useTabStore.setState({\r\n+        tabs: tabs.slice(0, currentIndex + 1),\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // 更多操作菜单\r\n+  const moreItems = useMemo(\r\n+    () => [\r\n+      {\r\n+        key: \"refresh\",\r\n+        label: \"刷新当前标签页\",\r\n+        icon: <ReloadOutlined />,\r\n+        onClick: handleRefresh,\r\n+      },\r\n+      {\r\n+        key: \"closeOthers\",\r\n+        label: \"关闭其他标签页\",\r\n+        icon: <CloseOutlined />,\r\n+        onClick: closeOtherTabs,\r\n+      },\r\n+      {\r\n+        key: \"closeAll\",\r\n+        label: \"关闭所有标签页\",\r\n+        icon: <CloseOutlined />,\r\n+        onClick: closeAllTabs,\r\n+      },\r\n+      {\r\n+        key: \"closeLeft\",\r\n+        label: \"关闭左侧标签页\",\r\n+        icon: <LeftOutlined />,\r\n+        onClick: closeLeftTabs,\r\n+        disabled: tabs.findIndex((tab) => tab.key === activeTab) === 0,\r\n+      },\r\n+      {\r\n+        key: \"closeRight\",\r\n+        label: \"关闭右侧标签页\",\r\n+        icon: <RightOutlined />,\r\n+        onClick: closeRightTabs,\r\n+        disabled:\r\n+          tabs.findIndex((tab) => tab.key === activeTab) === tabs.length - 1,\r\n+      },\r\n+    ],\r\n+    [activeTab, tabs]\r\n+  );\r\n+\r\n+  // 标签页操作区\r\n+  const operations = {\r\n+    right: (\r\n+      <div className={styles.operations}>\r\n+        <Tooltip title=\"刷新当前页面\">\r\n+          <ReloadOutlined className={styles.action} onClick={handleRefresh} />\r\n+        </Tooltip>\r\n+        <Dropdown menu={{ items: moreItems }} placement=\"bottomRight\">\r\n+          <VerticalAlignMiddleOutlined className={styles.action} />\r\n+        </Dropdown>\r\n+      </div>\r\n+    ),\r\n+  };\r\n+\r\n+  const items = tabs.map((tab) => ({\r\n+    key: tab.key,\r\n+    label: tab.label,\r\n+    closable: tabs.length > 1,\r\n+  }));\r\n+\r\n   return (\r\n     <div className={styles.tabBar}>\r\n       <Tabs\r\n         hideAdd\r\n         type=\"editable-card\"\r\n         activeKey={activeTab}\r\n         onChange={handleTabChange}\r\n         onEdit={handleTabEdit}\r\n-        items={tabs.map((tab) => ({\r\n-          key: tab.key,\r\n-          label: tab.label,\r\n-          closable: tabs.length > 1,\r\n-        }))}\r\n+        items={items}\r\n+        tabBarExtraContent={operations}\r\n+        tabBarStyle={{ margin: 0 }}\r\n       />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1746090461537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,45 @@\n+import { Button, Dropdown, Tabs, Tooltip } from \"antd\";\r\n import {\r\n+  CloseCircleOutlined,\r\n   CloseOutlined,\r\n-  LeftOutlined,\r\n+  MoreOutlined,\r\n   ReloadOutlined,\r\n-  RightOutlined,\r\n-  VerticalAlignMiddleOutlined,\r\n+  VerticalLeftOutlined,\r\n+  VerticalRightOutlined,\r\n } from \"@ant-design/icons\";\r\n-import { Dropdown, Tabs, Tooltip } from \"antd\";\r\n+import React, { useMemo } from \"react\";\r\n+import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n-import type { TabsProps } from \"antd\";\r\n import styles from \"./style.module.less\";\r\n-import { useMemo } from \"react\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n-const TabBar = () => {\r\n+const menuMap: Record<string, string> = {\r\n+  \"/dashboard\": \"仪表盘\",\r\n+  \"/permission/roles\": \"角色管理\",\r\n+  \"/permission/resources\": \"资源管理\",\r\n+  \"/permission/users\": \"用户管理\",\r\n+  \"/category/category-types\": \"分类类型管理\",\r\n+  \"/category/categories\": \"分类管理\",\r\n+};\r\n+\r\n+const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n-  const { tabs, activeTab, addTab, removeTab, setActiveTab } = useTabStore();\r\n+  const location = useLocation();\r\n+  const {\r\n+    tabs,\r\n+    activeTab,\r\n+    removeTab,\r\n+    removeOtherTabs,\r\n+    removeLeftTabs,\r\n+    removeRightTabs,\r\n+    removeAllTabs,\r\n+  } = useTabStore();\r\n \r\n-  // 处理标签页切换\r\n   const handleTabChange = (key: string) => {\r\n-    setActiveTab(key);\r\n     navigate(key);\r\n   };\r\n \r\n-  // 处理标签页编辑（关闭）\r\n   const handleTabEdit = (\r\n     targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n     action: \"add\" | \"remove\"\r\n   ) => {\r\n@@ -32,104 +47,64 @@\n       removeTab(targetKey);\r\n     }\r\n   };\r\n \r\n-  // 刷新当前页面\r\n-  const handleRefresh = () => {\r\n+  const refreshPage = () => {\r\n     window.location.reload();\r\n   };\r\n \r\n-  // 关闭其他标签页\r\n-  const closeOtherTabs = () => {\r\n-    const currentTab = tabs.find((tab) => tab.key === activeTab);\r\n-    if (currentTab) {\r\n-      useTabStore.setState({ tabs: [currentTab] });\r\n-    }\r\n-  };\r\n-\r\n-  // 关闭所有标签页\r\n-  const closeAllTabs = () => {\r\n-    useTabStore.setState({ tabs: [] });\r\n-    navigate(\"/app/dashboard\");\r\n-  };\r\n-\r\n-  // 关闭左侧标签页\r\n-  const closeLeftTabs = () => {\r\n-    const currentIndex = tabs.findIndex((tab) => tab.key === activeTab);\r\n-    if (currentIndex > -1) {\r\n-      useTabStore.setState({\r\n-        tabs: tabs.slice(currentIndex),\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // 关闭右侧标签页\r\n-  const closeRightTabs = () => {\r\n-    const currentIndex = tabs.findIndex((tab) => tab.key === activeTab);\r\n-    if (currentIndex > -1) {\r\n-      useTabStore.setState({\r\n-        tabs: tabs.slice(0, currentIndex + 1),\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // 更多操作菜单\r\n   const moreItems = useMemo(\r\n     () => [\r\n       {\r\n-        key: \"refresh\",\r\n-        label: \"刷新当前标签页\",\r\n-        icon: <ReloadOutlined />,\r\n-        onClick: handleRefresh,\r\n-      },\r\n-      {\r\n         key: \"closeOthers\",\r\n-        label: \"关闭其他标签页\",\r\n-        icon: <CloseOutlined />,\r\n-        onClick: closeOtherTabs,\r\n+        label: \"关闭其他\",\r\n+        icon: <CloseCircleOutlined />,\r\n+        onClick: () => removeOtherTabs(location.pathname),\r\n       },\r\n       {\r\n-        key: \"closeAll\",\r\n-        label: \"关闭所有标签页\",\r\n-        icon: <CloseOutlined />,\r\n-        onClick: closeAllTabs,\r\n-      },\r\n-      {\r\n         key: \"closeLeft\",\r\n-        label: \"关闭左侧标签页\",\r\n-        icon: <LeftOutlined />,\r\n-        onClick: closeLeftTabs,\r\n-        disabled: tabs.findIndex((tab) => tab.key === activeTab) === 0,\r\n+        label: \"关闭左侧\",\r\n+        icon: <VerticalRightOutlined />,\r\n+        onClick: () => removeLeftTabs(location.pathname),\r\n       },\r\n       {\r\n         key: \"closeRight\",\r\n-        label: \"关闭右侧标签页\",\r\n-        icon: <RightOutlined />,\r\n-        onClick: closeRightTabs,\r\n-        disabled:\r\n-          tabs.findIndex((tab) => tab.key === activeTab) === tabs.length - 1,\r\n+        label: \"关闭右侧\",\r\n+        icon: <VerticalLeftOutlined />,\r\n+        onClick: () => removeRightTabs(location.pathname),\r\n       },\r\n+      {\r\n+        key: \"closeAll\",\r\n+        label: \"关闭全部\",\r\n+        icon: <CloseOutlined />,\r\n+        onClick: () => removeAllTabs(),\r\n+      },\r\n     ],\r\n-    [activeTab, tabs]\r\n+    [\r\n+      location.pathname,\r\n+      removeOtherTabs,\r\n+      removeLeftTabs,\r\n+      removeRightTabs,\r\n+      removeAllTabs,\r\n+    ]\r\n   );\r\n \r\n-  // 标签页操作区\r\n   const operations = {\r\n     right: (\r\n       <div className={styles.operations}>\r\n-        <Tooltip title=\"刷新当前页面\">\r\n-          <ReloadOutlined className={styles.action} onClick={handleRefresh} />\r\n+        <Tooltip title=\"刷新当前页\">\r\n+          <Button type=\"text\" icon={<ReloadOutlined />} onClick={refreshPage} />\r\n         </Tooltip>\r\n         <Dropdown menu={{ items: moreItems }} placement=\"bottomRight\">\r\n-          <VerticalAlignMiddleOutlined className={styles.action} />\r\n+          <Button type=\"text\" icon={<MoreOutlined />} />\r\n         </Dropdown>\r\n       </div>\r\n     ),\r\n   };\r\n \r\n   const items = tabs.map((tab) => ({\r\n     key: tab.key,\r\n-    label: tab.label,\r\n+    label: menuMap[tab.key] || \"未知页面\",\r\n     closable: tabs.length > 1,\r\n   }));\r\n \r\n   return (\r\n@@ -141,9 +116,8 @@\n         onChange={handleTabChange}\r\n         onEdit={handleTabEdit}\r\n         items={items}\r\n         tabBarExtraContent={operations}\r\n-        tabBarStyle={{ margin: 0 }}\r\n       />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1746090763725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,14 @@\n import styles from \"./style.module.less\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n const menuMap: Record<string, string> = {\r\n-  \"/dashboard\": \"仪表盘\",\r\n-  \"/permission/roles\": \"角色管理\",\r\n-  \"/permission/resources\": \"资源管理\",\r\n-  \"/permission/users\": \"用户管理\",\r\n-  \"/category/category-types\": \"分类类型管理\",\r\n-  \"/category/categories\": \"分类管理\",\r\n+  \"/app/dashboard\": \"仪表盘\",\r\n+  \"/app/permission/roles\": \"角色管理\",\r\n+  \"/app/permission/resources\": \"资源管理\",\r\n+  \"/app/permission/users\": \"用户管理\",\r\n+  \"/app/category/category-types\": \"分类类型管理\",\r\n+  \"/app/category/categories\": \"分类管理\",\r\n };\r\n \r\n const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n"
                },
                {
                    "date": 1746141591761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,19 @@\n     targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n     action: \"add\" | \"remove\"\r\n   ) => {\r\n     if (action === \"remove\" && typeof targetKey === \"string\") {\r\n-      removeTab(targetKey);\r\n+      const tab = tabs.find(t => t.key === targetKey);\r\n+      if (tab && tab.key !== \"/app/dashboard\") {\r\n+        removeTab(targetKey);\r\n+        // 如果关闭的是当前标签，导航到前一个标签\r\n+        if (targetKey === location.pathname) {\r\n+          const currentIndex = tabs.findIndex(t => t.key === targetKey);\r\n+          if (currentIndex > 0) {\r\n+            navigate(tabs[currentIndex - 1].key);\r\n+          }\r\n+        }\r\n+      }\r\n     }\r\n   };\r\n \r\n   const refreshPage = () => {\r\n@@ -75,17 +85,21 @@\n       {\r\n         key: \"closeAll\",\r\n         label: \"关闭全部\",\r\n         icon: <CloseOutlined />,\r\n-        onClick: () => removeAllTabs(),\r\n+        onClick: () => {\r\n+          removeAllTabs();\r\n+          navigate(\"/app/dashboard\");\r\n+        },\r\n       },\r\n     ],\r\n     [\r\n       location.pathname,\r\n       removeOtherTabs,\r\n       removeLeftTabs,\r\n       removeRightTabs,\r\n       removeAllTabs,\r\n+      navigate,\r\n     ]\r\n   );\r\n \r\n   const operations = {\r\n@@ -103,9 +117,9 @@\n \r\n   const items = tabs.map((tab) => ({\r\n     key: tab.key,\r\n     label: menuMap[tab.key] || \"未知页面\",\r\n-    closable: tabs.length > 1,\r\n+    closable: tab.key !== \"/app/dashboard\" && tabs.length > 1,\r\n   }));\r\n \r\n   return (\r\n     <div className={styles.tabBar}>\r\n"
                },
                {
                    "date": 1746141664373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,14 +43,14 @@\n     targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n     action: \"add\" | \"remove\"\r\n   ) => {\r\n     if (action === \"remove\" && typeof targetKey === \"string\") {\r\n-      const tab = tabs.find(t => t.key === targetKey);\r\n+      const tab = tabs.find((t) => t.key === targetKey);\r\n       if (tab && tab.key !== \"/app/dashboard\") {\r\n         removeTab(targetKey);\r\n         // 如果关闭的是当前标签，导航到前一个标签\r\n         if (targetKey === location.pathname) {\r\n-          const currentIndex = tabs.findIndex(t => t.key === targetKey);\r\n+          const currentIndex = tabs.findIndex((t) => t.key === targetKey);\r\n           if (currentIndex > 0) {\r\n             navigate(tabs[currentIndex - 1].key);\r\n           }\r\n         }\r\n"
                },
                {
                    "date": 1746240950420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,59 +6,78 @@\n   ReloadOutlined,\r\n   VerticalLeftOutlined,\r\n   VerticalRightOutlined,\r\n } from \"@ant-design/icons\";\r\n-import React, { useMemo } from \"react\";\r\n+import React, { useEffect, useMemo, useRef } from \"react\";\r\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n+import { buildMenuMap } from \"@/router/dynamicRoutes\";\r\n import styles from \"./style.module.less\";\r\n+import { useAuthStore } from \"@/store/modules/auth\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n-const menuMap: Record<string, string> = {\r\n-  \"/app/dashboard\": \"仪表盘\",\r\n-  \"/app/permission/roles\": \"角色管理\",\r\n-  \"/app/permission/resources\": \"资源管理\",\r\n-  \"/app/permission/users\": \"用户管理\",\r\n-  \"/app/category/category-types\": \"分类类型管理\",\r\n-  \"/app/category/categories\": \"分类管理\",\r\n-};\r\n-\r\n const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n   const location = useLocation();\r\n   const {\r\n     tabs,\r\n     activeTab,\r\n+    addTab,\r\n     removeTab,\r\n     removeOtherTabs,\r\n     removeLeftTabs,\r\n     removeRightTabs,\r\n     removeAllTabs,\r\n   } = useTabStore();\r\n+  const resources = useAuthStore((state) => state.resources);\r\n+  const user = useAuthStore((state) => state.user);\r\n+  const prevUserId = useRef(user?.id);\r\n \r\n-  const handleTabChange = (key: string) => {\r\n+  // 动态生成 menuMap\r\n+  const menuMap = useMemo(() => buildMenuMap(resources || []), [resources]);\r\n+\r\n+  // 用户切换时自动重置TabBar，只保留dashboard\r\n+  useEffect(() => {\r\n+    if (user?.id !== prevUserId.current) {\r\n+      removeAllTabs();\r\n+      prevUserId.current = user?.id;\r\n+    }\r\n+  }, [user?.id, removeAllTabs]);\r\n+\r\n+  // TabBar标签页切换\r\n+  const onChange = (key: string) => {\r\n     navigate(key);\r\n   };\r\n \r\n-  const handleTabEdit = (\r\n-    targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n-    action: \"add\" | \"remove\"\r\n-  ) => {\r\n-    if (action === \"remove\" && typeof targetKey === \"string\") {\r\n-      const tab = tabs.find((t) => t.key === targetKey);\r\n-      if (tab && tab.key !== \"/app/dashboard\") {\r\n-        removeTab(targetKey);\r\n-        // 如果关闭的是当前标签，导航到前一个标签\r\n-        if (targetKey === location.pathname) {\r\n-          const currentIndex = tabs.findIndex((t) => t.key === targetKey);\r\n-          if (currentIndex > 0) {\r\n-            navigate(tabs[currentIndex - 1].key);\r\n-          }\r\n-        }\r\n+  // 关闭标签页\r\n+  const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n+    if (action === \"remove\") {\r\n+      removeTab(targetKey);\r\n+      // 如果关闭的是当前标签，跳转到dashboard\r\n+      if (targetKey === activeTab) {\r\n+        navigate(\"/app/dashboard\");\r\n       }\r\n     }\r\n   };\r\n \r\n+  // 自动添加当前路由到TabBar\r\n+  useEffect(() => {\r\n+    // 移除 /app 前缀\r\n+    const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n+    // 确保路径格式正确\r\n+    const normalizedPath = currentPath.startsWith(\"/\")\r\n+      ? currentPath\r\n+      : `/${currentPath}`;\r\n+\r\n+    if (!tabs.find((tab) => tab.key === location.pathname)) {\r\n+      const routeName = menuMap[normalizedPath];\r\n+      addTab({\r\n+        key: location.pathname, // 保持原始路径（带 /app 前缀）作为 key\r\n+        label: routeName || normalizedPath,\r\n+      });\r\n+    }\r\n+  }, [location.pathname, addTab, tabs, menuMap]);\r\n+\r\n   const refreshPage = () => {\r\n     window.location.reload();\r\n   };\r\n \r\n@@ -114,23 +133,20 @@\n       </div>\r\n     ),\r\n   };\r\n \r\n-  const items = tabs.map((tab) => ({\r\n-    key: tab.key,\r\n-    label: menuMap[tab.key] || \"未知页面\",\r\n-    closable: tab.key !== \"/app/dashboard\" && tabs.length > 1,\r\n-  }));\r\n-\r\n   return (\r\n     <div className={styles.tabBar}>\r\n       <Tabs\r\n         hideAdd\r\n         type=\"editable-card\"\r\n         activeKey={activeTab}\r\n-        onChange={handleTabChange}\r\n-        onEdit={handleTabEdit}\r\n-        items={items}\r\n+        onChange={onChange}\r\n+        onEdit={onEdit as any}\r\n+        items={tabs.map((tab) => ({\r\n+          key: tab.key,\r\n+          label: menuMap[tab.key.replace(/^\\/app/, \"\")] || tab.label || tab.key,\r\n+        }))}\r\n         tabBarExtraContent={operations}\r\n       />\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1746241118615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,13 @@\n \r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n     if (action === \"remove\") {\r\n+      // 如果是 dashboard 标签，不允许关闭\r\n+      if (targetKey === \"/app/dashboard\") {\r\n+        return;\r\n+      }\r\n+\r\n       removeTab(targetKey);\r\n       // 如果关闭的是当前标签，跳转到dashboard\r\n       if (targetKey === activeTab) {\r\n         navigate(\"/app/dashboard\");\r\n"
                },
                {
                    "date": 1746241147245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,8 @@\n \r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n     if (action === \"remove\") {\r\n-      // 如果是 dashboard 标签，不允许关闭\r\n-      if (targetKey === \"/app/dashboard\") {\r\n-        return;\r\n-      }\r\n-\r\n       removeTab(targetKey);\r\n       // 如果关闭的是当前标签，跳转到dashboard\r\n       if (targetKey === activeTab) {\r\n         navigate(\"/app/dashboard\");\r\n"
                },
                {
                    "date": 1746241243129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n   };\r\n \r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n+    console.log(targetKey, action, \"<<<<<<<<<\");\r\n     if (action === \"remove\") {\r\n       removeTab(targetKey);\r\n       // 如果关闭的是当前标签，跳转到dashboard\r\n       if (targetKey === activeTab) {\r\n"
                },
                {
                    "date": 1746241508530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,19 @@\n         key: location.pathname, // 保持原始路径（带 /app 前缀）作为 key\r\n         label: routeName || normalizedPath,\r\n       });\r\n     }\r\n-  }, [location.pathname, addTab, tabs, menuMap]);\r\n+  }, [\r\n+    location.pathname,\r\n+    addTab,\r\n+    tabs,\r\n+    menuMap,\r\n+    removeTab,\r\n+    removeOtherTabs,\r\n+    removeLeftTabs,\r\n+    removeRightTabs,\r\n+    removeAllTabs,\r\n+  ]);\r\n \r\n   const refreshPage = () => {\r\n     window.location.reload();\r\n   };\r\n"
                },
                {
                    "date": 1746241588932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,10 @@\n       </div>\r\n     ),\r\n   };\r\n \r\n+  console.log(\"tabs\", tabs);\r\n+\r\n   return (\r\n     <div className={styles.tabBar}>\r\n       <Tabs\r\n         hideAdd\r\n"
                },
                {
                    "date": 1746241738343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,20 +47,8 @@\n   const onChange = (key: string) => {\r\n     navigate(key);\r\n   };\r\n \r\n-  // 关闭标签页\r\n-  const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n-    console.log(targetKey, action, \"<<<<<<<<<\");\r\n-    if (action === \"remove\") {\r\n-      removeTab(targetKey);\r\n-      // 如果关闭的是当前标签，跳转到dashboard\r\n-      if (targetKey === activeTab) {\r\n-        navigate(\"/app/dashboard\");\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n   // 自动添加当前路由到TabBar\r\n   useEffect(() => {\r\n     // 移除 /app 前缀\r\n     const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n@@ -68,27 +56,37 @@\n     const normalizedPath = currentPath.startsWith(\"/\")\r\n       ? currentPath\r\n       : `/${currentPath}`;\r\n \r\n-    if (!tabs.find((tab) => tab.key === location.pathname)) {\r\n+    // 如果当前路径不是 dashboard 且不在 tabs 中，则添加\r\n+    if (\r\n+      location.pathname !== \"/app/dashboard\" &&\r\n+      !tabs.find((tab) => tab.key === location.pathname)\r\n+    ) {\r\n       const routeName = menuMap[normalizedPath];\r\n       addTab({\r\n         key: location.pathname, // 保持原始路径（带 /app 前缀）作为 key\r\n         label: routeName || normalizedPath,\r\n       });\r\n     }\r\n-  }, [\r\n-    location.pathname,\r\n-    addTab,\r\n-    tabs,\r\n-    menuMap,\r\n-    removeTab,\r\n-    removeOtherTabs,\r\n-    removeLeftTabs,\r\n-    removeRightTabs,\r\n-    removeAllTabs,\r\n-  ]);\r\n+  }, [location.pathname, addTab, tabs, menuMap]);\r\n \r\n+  // 关闭标签页\r\n+  const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n+    if (action === \"remove\") {\r\n+      // 如果是 dashboard 标签，不允许关闭\r\n+      if (targetKey === \"/app/dashboard\") {\r\n+        return;\r\n+      }\r\n+\r\n+      removeTab(targetKey);\r\n+      // 如果关闭的是当前标签，跳转到dashboard\r\n+      if (targetKey === activeTab) {\r\n+        navigate(\"/app/dashboard\");\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n   const refreshPage = () => {\r\n     window.location.reload();\r\n   };\r\n \r\n"
                },
                {
                    "date": 1746241829457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   ReloadOutlined,\r\n   VerticalLeftOutlined,\r\n   VerticalRightOutlined,\r\n } from \"@ant-design/icons\";\r\n-import React, { useEffect, useMemo, useRef } from \"react\";\r\n+import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n import { buildMenuMap } from \"@/router/dynamicRoutes\";\r\n import styles from \"./style.module.less\";\r\n@@ -30,9 +30,15 @@\n   } = useTabStore();\r\n   const resources = useAuthStore((state) => state.resources);\r\n   const user = useAuthStore((state) => state.user);\r\n   const prevUserId = useRef(user?.id);\r\n+  const [forceUpdate, setForceUpdate] = useState(0);\r\n \r\n+  // 监听 tabs 变化\r\n+  useEffect(() => {\r\n+    setForceUpdate((prev) => prev + 1);\r\n+  }, [tabs]);\r\n+\r\n   // 动态生成 menuMap\r\n   const menuMap = useMemo(() => buildMenuMap(resources || []), [resources]);\r\n \r\n   // 用户切换时自动重置TabBar，只保留dashboard\r\n"
                },
                {
                    "date": 1746241908576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   ReloadOutlined,\r\n   VerticalLeftOutlined,\r\n   VerticalRightOutlined,\r\n } from \"@ant-design/icons\";\r\n-import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n+import React, { useEffect, useMemo, useRef } from \"react\";\r\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n import { buildMenuMap } from \"@/router/dynamicRoutes\";\r\n import styles from \"./style.module.less\";\r\n@@ -30,14 +30,20 @@\n   } = useTabStore();\r\n   const resources = useAuthStore((state) => state.resources);\r\n   const user = useAuthStore((state) => state.user);\r\n   const prevUserId = useRef(user?.id);\r\n-  const [forceUpdate, setForceUpdate] = useState(0);\r\n+  const tabsRef = useRef(tabs);\r\n \r\n-  // 监听 tabs 变化\r\n+  // 订阅 tabs 变化\r\n   useEffect(() => {\r\n-    setForceUpdate((prev) => prev + 1);\r\n-  }, [tabs]);\r\n+    const unsubscribe = useTabStore.subscribe(\r\n+      (state) => state.tabs,\r\n+      (newTabs) => {\r\n+        tabsRef.current = newTabs;\r\n+      }\r\n+    );\r\n+    return () => unsubscribe();\r\n+  }, []);\r\n \r\n   // 动态生成 menuMap\r\n   const menuMap = useMemo(() => buildMenuMap(resources || []), [resources]);\r\n \r\n@@ -65,17 +71,17 @@\n \r\n     // 如果当前路径不是 dashboard 且不在 tabs 中，则添加\r\n     if (\r\n       location.pathname !== \"/app/dashboard\" &&\r\n-      !tabs.find((tab) => tab.key === location.pathname)\r\n+      !tabsRef.current.find((tab) => tab.key === location.pathname)\r\n     ) {\r\n       const routeName = menuMap[normalizedPath];\r\n       addTab({\r\n         key: location.pathname, // 保持原始路径（带 /app 前缀）作为 key\r\n         label: routeName || normalizedPath,\r\n       });\r\n     }\r\n-  }, [location.pathname, addTab, tabs, menuMap]);\r\n+  }, [location.pathname, addTab, menuMap]);\r\n \r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n     if (action === \"remove\") {\r\n"
                },
                {
                    "date": 1746241970179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,10 +154,8 @@\n       </div>\r\n     ),\r\n   };\r\n \r\n-  console.log(\"tabs\", tabs);\r\n-\r\n   return (\r\n     <div className={styles.tabBar}>\r\n       <Tabs\r\n         hideAdd\r\n"
                },
                {
                    "date": 1746242038673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,14 +34,11 @@\n   const tabsRef = useRef(tabs);\r\n \r\n   // 订阅 tabs 变化\r\n   useEffect(() => {\r\n-    const unsubscribe = useTabStore.subscribe(\r\n-      (state) => state.tabs,\r\n-      (newTabs) => {\r\n-        tabsRef.current = newTabs;\r\n-      }\r\n-    );\r\n+    const unsubscribe = useTabStore.subscribe((state) => {\r\n+      tabsRef.current = state.tabs;\r\n+    });\r\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n   // 动态生成 menuMap\r\n"
                },
                {
                    "date": 1746328354805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,19 @@\n       });\r\n     }\r\n   }, [location.pathname, addTab, menuMap]);\r\n \r\n+  // 路由变化时同步 activeTab\r\n+  useEffect(() => {\r\n+    if (activeTab !== location.pathname) {\r\n+      addTab({\r\n+        key: location.pathname,\r\n+        label:\r\n+          menuMap[location.pathname.replace(/^\\/app/, \"\")] || location.pathname,\r\n+      });\r\n+    }\r\n+  }, [location.pathname, activeTab, addTab, menuMap]);\r\n+\r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n     if (action === \"remove\") {\r\n       // 如果是 dashboard 标签，不允许关闭\r\n"
                },
                {
                    "date": 1746330096549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,23 @@\n   VerticalLeftOutlined,\r\n   VerticalRightOutlined,\r\n } from \"@ant-design/icons\";\r\n import React, { useEffect, useMemo, useRef } from \"react\";\r\n+import { buildMenuMap, lazyLoad } from \"@/router/dynamicRoutes\";\r\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n-import { buildMenuMap } from \"@/router/dynamicRoutes\";\r\n+import { KeepAlive } from \"keepalive-for-react\";\r\n import styles from \"./style.module.less\";\r\n import { useAuthStore } from \"@/store/modules/auth\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n+// Tab 结构增加 componentPath\r\n+interface Tab {\r\n+  key: string;\r\n+  label: string;\r\n+  componentPath: string;\r\n+}\r\n+\r\n const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n   const location = useLocation();\r\n   const {\r\n@@ -32,19 +40,38 @@\n   const user = useAuthStore((state) => state.user);\r\n   const prevUserId = useRef(user?.id);\r\n   const tabsRef = useRef(tabs);\r\n \r\n+  // 动态生成 menuMap 和 path->componentPath 映射\r\n+  const menuMap = useMemo(() => buildMenuMap(resources || []), [resources]);\r\n+  const componentMap = useMemo(() => {\r\n+    const map: Record<string, string> = {};\r\n+    function walk(routes: any[], parentPath = \"\") {\r\n+      for (const item of routes) {\r\n+        if ((item.type || \"\").toLowerCase() === \"menu\") {\r\n+          const normalizedPath = item.path.startsWith(\"/\") ? item.path : `/${item.path}`;\r\n+          const fullPath = parentPath ? `${parentPath}${normalizedPath}`.replace(/\\/+/g, \"/\") : normalizedPath;\r\n+          if (item.component) {\r\n+            map[fullPath] = item.component;\r\n+          }\r\n+          if (item.children && item.children.length > 0) {\r\n+            walk(item.children, fullPath);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    walk(resources || []);\r\n+    return map;\r\n+  }, [resources]);\r\n+\r\n   // 订阅 tabs 变化\r\n   useEffect(() => {\r\n     const unsubscribe = useTabStore.subscribe((state) => {\r\n       tabsRef.current = state.tabs;\r\n     });\r\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n-  // 动态生成 menuMap\r\n-  const menuMap = useMemo(() => buildMenuMap(resources || []), [resources]);\r\n-\r\n   // 用户切换时自动重置TabBar，只保留dashboard\r\n   useEffect(() => {\r\n     if (user?.id !== prevUserId.current) {\r\n       removeAllTabs();\r\n@@ -58,49 +85,44 @@\n   };\r\n \r\n   // 自动添加当前路由到TabBar\r\n   useEffect(() => {\r\n-    // 移除 /app 前缀\r\n     const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n-    // 确保路径格式正确\r\n-    const normalizedPath = currentPath.startsWith(\"/\")\r\n-      ? currentPath\r\n-      : `/${currentPath}`;\r\n-\r\n-    // 如果当前路径不是 dashboard 且不在 tabs 中，则添加\r\n+    const normalizedPath = currentPath.startsWith(\"/\") ? currentPath : `/${currentPath}`;\r\n     if (\r\n       location.pathname !== \"/app/dashboard\" &&\r\n-      !tabsRef.current.find((tab) => tab.key === location.pathname)\r\n+      !tabsRef.current.find((tab: any) => tab.key === location.pathname)\r\n     ) {\r\n       const routeName = menuMap[normalizedPath];\r\n+      const componentPath = componentMap[normalizedPath];\r\n       addTab({\r\n-        key: location.pathname, // 保持原始路径（带 /app 前缀）作为 key\r\n+        key: location.pathname,\r\n         label: routeName || normalizedPath,\r\n+        componentPath: componentPath || \"\",\r\n       });\r\n     }\r\n-  }, [location.pathname, addTab, menuMap]);\r\n+  }, [location.pathname, addTab, menuMap, componentMap]);\r\n \r\n   // 路由变化时同步 activeTab\r\n   useEffect(() => {\r\n     if (activeTab !== location.pathname) {\r\n+      const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n+      const normalizedPath = currentPath.startsWith(\"/\") ? currentPath : `/${currentPath}`;\r\n       addTab({\r\n         key: location.pathname,\r\n-        label:\r\n-          menuMap[location.pathname.replace(/^\\/app/, \"\")] || location.pathname,\r\n+        label: menuMap[normalizedPath] || location.pathname,\r\n+        componentPath: componentMap[normalizedPath] || \"\",\r\n       });\r\n     }\r\n-  }, [location.pathname, activeTab, addTab, menuMap]);\r\n+  }, [location.pathname, activeTab, addTab, menuMap, componentMap]);\r\n \r\n   // 关闭标签页\r\n   const onEdit = (targetKey: string, action: \"add\" | \"remove\") => {\r\n     if (action === \"remove\") {\r\n-      // 如果是 dashboard 标签，不允许关闭\r\n       if (targetKey === \"/app/dashboard\") {\r\n         return;\r\n       }\r\n-\r\n       removeTab(targetKey);\r\n-      // 如果关闭的是当前标签，跳转到dashboard\r\n       if (targetKey === activeTab) {\r\n         navigate(\"/app/dashboard\");\r\n       }\r\n     }\r\n@@ -162,22 +184,32 @@\n       </div>\r\n     ),\r\n   };\r\n \r\n+  // 当前激活 tab\r\n+  const currentTab = tabs.find((tab: any) => tab.key === activeTab);\r\n+\r\n   return (\r\n     <div className={styles.tabBar}>\r\n       <Tabs\r\n         hideAdd\r\n         type=\"editable-card\"\r\n         activeKey={activeTab}\r\n         onChange={onChange}\r\n         onEdit={onEdit as any}\r\n-        items={tabs.map((tab) => ({\r\n+        items={tabs.map((tab: any) => ({\r\n           key: tab.key,\r\n-          label: menuMap[tab.key.replace(/^\\/app/, \"\")] || tab.label || tab.key,\r\n+          label: tab.label,\r\n         }))}\r\n         tabBarExtraContent={operations}\r\n       />\r\n+      <div className={styles.tabContent}>\r\n+        {currentTab && currentTab.componentPath && (\r\n+          <KeepAlive activeCacheKey={activeTab}>\r\n+            {lazyLoad(currentTab.componentPath)}\r\n+          </KeepAlive>\r\n+        )}\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1746330212462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,14 @@\n     const map: Record<string, string> = {};\r\n     function walk(routes: any[], parentPath = \"\") {\r\n       for (const item of routes) {\r\n         if ((item.type || \"\").toLowerCase() === \"menu\") {\r\n-          const normalizedPath = item.path.startsWith(\"/\") ? item.path : `/${item.path}`;\r\n-          const fullPath = parentPath ? `${parentPath}${normalizedPath}`.replace(/\\/+/g, \"/\") : normalizedPath;\r\n+          const normalizedPath = item.path.startsWith(\"/\")\r\n+            ? item.path\r\n+            : `/${item.path}`;\r\n+          const fullPath = parentPath\r\n+            ? `${parentPath}${normalizedPath}`.replace(/\\/+/g, \"/\")\r\n+            : normalizedPath;\r\n           if (item.component) {\r\n             map[fullPath] = item.component;\r\n           }\r\n           if (item.children && item.children.length > 0) {\r\n@@ -86,9 +90,11 @@\n \r\n   // 自动添加当前路由到TabBar\r\n   useEffect(() => {\r\n     const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n-    const normalizedPath = currentPath.startsWith(\"/\") ? currentPath : `/${currentPath}`;\r\n+    const normalizedPath = currentPath.startsWith(\"/\")\r\n+      ? currentPath\r\n+      : `/${currentPath}`;\r\n     if (\r\n       location.pathname !== \"/app/dashboard\" &&\r\n       !tabsRef.current.find((tab: any) => tab.key === location.pathname)\r\n     ) {\r\n@@ -105,9 +111,11 @@\n   // 路由变化时同步 activeTab\r\n   useEffect(() => {\r\n     if (activeTab !== location.pathname) {\r\n       const currentPath = location.pathname.replace(/^\\/app/, \"\");\r\n-      const normalizedPath = currentPath.startsWith(\"/\") ? currentPath : `/${currentPath}`;\r\n+      const normalizedPath = currentPath.startsWith(\"/\")\r\n+        ? currentPath\r\n+        : `/${currentPath}`;\r\n       addTab({\r\n         key: location.pathname,\r\n         label: menuMap[normalizedPath] || location.pathname,\r\n         componentPath: componentMap[normalizedPath] || \"\",\r\n"
                },
                {
                    "date": 1746330615344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,10 @@\n import { useAuthStore } from \"@/store/modules/auth\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n // Tab 结构增加 componentPath\r\n-interface Tab {\r\n-  key: string;\r\n-  label: string;\r\n-  componentPath: string;\r\n-}\r\n \r\n+\r\n const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n   const location = useLocation();\r\n   const {\r\n"
                },
                {
                    "date": 1746330626529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,8 @@\n import styles from \"./style.module.less\";\r\n import { useAuthStore } from \"@/store/modules/auth\";\r\n import { useTabStore } from \"@/store/modules/tab\";\r\n \r\n-// Tab 结构增加 componentPath\r\n-\r\n const TabBar: React.FC = () => {\r\n   const navigate = useNavigate();\r\n   const location = useLocation();\r\n   const {\r\n"
                },
                {
                    "date": 1746331270587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,11 +196,12 @@\n         type=\"editable-card\"\r\n         activeKey={activeTab}\r\n         onChange={onChange}\r\n         onEdit={onEdit as any}\r\n-        items={tabs.map((tab: any) => ({\r\n+        items={tabs.map((tab: any, idx: number) => ({\r\n           key: tab.key,\r\n           label: tab.label,\r\n+          closable: idx === 0 ? false : true,\r\n         }))}\r\n         tabBarExtraContent={operations}\r\n       />\r\n       <div className={styles.tabContent}>\r\n"
                }
            ],
            "date": 1746088331859,
            "name": "Commit-0",
            "content": "import { Tabs } from \"antd\";\r\nimport styles from \"./style.module.less\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTabStore } from \"@/stores/tab\";\r\n\r\nconst TabBar = () => {\r\n  const navigate = useNavigate();\r\n  const { tabs, activeTab, addTab, removeTab, setActiveTab } = useTabStore();\r\n\r\n  // 处理标签页切换\r\n  const handleTabChange = (key: string) => {\r\n    setActiveTab(key);\r\n    navigate(key);\r\n  };\r\n\r\n  // 处理标签页编辑（关闭）\r\n  const handleTabEdit = (\r\n    targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n    action: \"add\" | \"remove\"\r\n  ) => {\r\n    if (action === \"remove\" && typeof targetKey === \"string\") {\r\n      removeTab(targetKey);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.tabBar}>\r\n      <Tabs\r\n        hideAdd\r\n        type=\"editable-card\"\r\n        activeKey={activeTab}\r\n        onChange={handleTabChange}\r\n        onEdit={handleTabEdit}\r\n        items={tabs.map((tab) => ({\r\n          key: tab.key,\r\n          label: tab.label,\r\n          closable: tabs.length > 1,\r\n        }))}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabBar; "
        }
    ]
}